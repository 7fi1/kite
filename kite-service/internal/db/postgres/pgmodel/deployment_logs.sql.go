// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: deployment_logs.sql

package pgmodel

import (
	"context"
	"time"
)

const createDeploymentLogEntry = `-- name: CreateDeploymentLogEntry :one
INSERT INTO deployment_logs (
    id,
    deployment_id,
    level,
    message,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, deployment_id, level, message, created_at
`

type CreateDeploymentLogEntryParams struct {
	ID           string
	DeploymentID string
	Level        string
	Message      string
	CreatedAt    time.Time
}

func (q *Queries) CreateDeploymentLogEntry(ctx context.Context, arg CreateDeploymentLogEntryParams) (DeploymentLog, error) {
	row := q.db.QueryRowContext(ctx, createDeploymentLogEntry,
		arg.ID,
		arg.DeploymentID,
		arg.Level,
		arg.Message,
		arg.CreatedAt,
	)
	var i DeploymentLog
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Level,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getDeploymentLogEntries = `-- name: GetDeploymentLogEntries :many
SELECT id, deployment_id, level, message, created_at FROM deployment_logs WHERE deployment_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetDeploymentLogEntries(ctx context.Context, deploymentID string) ([]DeploymentLog, error) {
	rows, err := q.db.QueryContext(ctx, getDeploymentLogEntries, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeploymentLog
	for rows.Next() {
		var i DeploymentLog
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.Level,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
