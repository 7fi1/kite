// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUser = `-- name: GetUser :one
SELECT id, username, email, discriminator, global_name, avatar, public_flags, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Discriminator,
		&i.GlobalName,
		&i.Avatar,
		&i.PublicFlags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (
    id,
    username,
    email,
    discriminator,
    global_name,
    avatar,
    public_flags,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) ON CONFLICT (id) DO UPDATE SET
    username = EXCLUDED.username,
    email = EXCLUDED.email,
    discriminator = EXCLUDED.discriminator,
    global_name = EXCLUDED.global_name,
    avatar = EXCLUDED.avatar,
    public_flags = EXCLUDED.public_flags,
    updated_at = EXCLUDED.updated_at
RETURNING id, username, email, discriminator, global_name, avatar, public_flags, created_at, updated_at
`

type UpsertUserParams struct {
	ID            string
	Username      string
	Email         string
	Discriminator pgtype.Text
	GlobalName    pgtype.Text
	Avatar        pgtype.Text
	PublicFlags   int32
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Discriminator,
		arg.GlobalName,
		arg.Avatar,
		arg.PublicFlags,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Discriminator,
		&i.GlobalName,
		&i.Avatar,
		&i.PublicFlags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
