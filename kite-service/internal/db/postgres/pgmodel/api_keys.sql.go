// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: api_keys.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    id, 
    type, 
    name, 
    key, 
    key_hash, 
    app_id, 
    creator_user_id, 
    created_at, 
    updated_at, 
    expires_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, type, name, key, key_hash, app_id, creator_user_id, created_at, updated_at, expires_at
`

type CreateAPIKeyParams struct {
	ID            string
	Type          string
	Name          string
	Key           string
	KeyHash       string
	AppID         string
	CreatorUserID string
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	ExpiresAt     pgtype.Timestamp
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.Key,
		arg.KeyHash,
		arg.AppID,
		arg.CreatorUserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Key,
		&i.KeyHash,
		&i.AppID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, type, name, key, key_hash, app_id, creator_user_id, created_at, updated_at, expires_at FROM api_keys WHERE key_hash = $1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Name,
		&i.Key,
		&i.KeyHash,
		&i.AppID,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getAPIKeysByAppID = `-- name: GetAPIKeysByAppID :many
SELECT id, type, name, key, key_hash, app_id, creator_user_id, created_at, updated_at, expires_at FROM api_keys WHERE app_id = $1
`

func (q *Queries) GetAPIKeysByAppID(ctx context.Context, appID string) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getAPIKeysByAppID, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Key,
			&i.KeyHash,
			&i.AppID,
			&i.CreatorUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
