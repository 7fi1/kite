// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: deployments.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteDeployment = `-- name: DeleteDeployment :one
DELETE FROM deployments WHERE id = $1 AND guild_id = $2 RETURNING id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at
`

type DeleteDeploymentParams struct {
	ID      string
	GuildID string
}

func (q *Queries) DeleteDeployment(ctx context.Context, arg DeleteDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, deleteDeployment, arg.ID, arg.GuildID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Description,
		&i.GuildID,
		&i.PluginVersionID,
		&i.WasmBytes,
		&i.Manifest,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeployedAt,
	)
	return i, err
}

const getDeploymentForGuild = `-- name: GetDeploymentForGuild :one
SELECT id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at FROM deployments WHERE id = $1 AND guild_id = $2
`

type GetDeploymentForGuildParams struct {
	ID      string
	GuildID string
}

func (q *Queries) GetDeploymentForGuild(ctx context.Context, arg GetDeploymentForGuildParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, getDeploymentForGuild, arg.ID, arg.GuildID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Description,
		&i.GuildID,
		&i.PluginVersionID,
		&i.WasmBytes,
		&i.Manifest,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeployedAt,
	)
	return i, err
}

const getDeploymentIDs = `-- name: GetDeploymentIDs :many
SELECT id, guild_id FROM deployments
`

type GetDeploymentIDsRow struct {
	ID      string
	GuildID string
}

func (q *Queries) GetDeploymentIDs(ctx context.Context) ([]GetDeploymentIDsRow, error) {
	rows, err := q.db.Query(ctx, getDeploymentIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeploymentIDsRow
	for rows.Next() {
		var i GetDeploymentIDsRow
		if err := rows.Scan(&i.ID, &i.GuildID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeployments = `-- name: GetDeployments :many
SELECT id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at FROM deployments
`

func (q *Queries) GetDeployments(ctx context.Context) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, getDeployments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Name,
			&i.Description,
			&i.GuildID,
			&i.PluginVersionID,
			&i.WasmBytes,
			&i.Manifest,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeploymentsForGuild = `-- name: GetDeploymentsForGuild :many
SELECT id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at FROM deployments WHERE guild_id = $1 ORDER BY updated_at DESC
`

func (q *Queries) GetDeploymentsForGuild(ctx context.Context, guildID string) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, getDeploymentsForGuild, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Name,
			&i.Description,
			&i.GuildID,
			&i.PluginVersionID,
			&i.WasmBytes,
			&i.Manifest,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeploymentsWithUndeployedChanges = `-- name: GetDeploymentsWithUndeployedChanges :many
SELECT id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at FROM deployments WHERE deployed_at IS NULL OR updated_at > deployed_at
`

func (q *Queries) GetDeploymentsWithUndeployedChanges(ctx context.Context) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, getDeploymentsWithUndeployedChanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Name,
			&i.Description,
			&i.GuildID,
			&i.PluginVersionID,
			&i.WasmBytes,
			&i.Manifest,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildIdsWithDeployments = `-- name: GetGuildIdsWithDeployments :many
SELECT DISTINCT guild_id FROM deployments
`

func (q *Queries) GetGuildIdsWithDeployments(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getGuildIdsWithDeployments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var guild_id string
		if err := rows.Scan(&guild_id); err != nil {
			return nil, err
		}
		items = append(items, guild_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeploymentsDeployedAtForGuild = `-- name: UpdateDeploymentsDeployedAtForGuild :one
UPDATE deployments SET deployed_at = $1 WHERE guild_id = $2 RETURNING id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at
`

type UpdateDeploymentsDeployedAtForGuildParams struct {
	DeployedAt pgtype.Timestamp
	GuildID    string
}

func (q *Queries) UpdateDeploymentsDeployedAtForGuild(ctx context.Context, arg UpdateDeploymentsDeployedAtForGuildParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeploymentsDeployedAtForGuild, arg.DeployedAt, arg.GuildID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Description,
		&i.GuildID,
		&i.PluginVersionID,
		&i.WasmBytes,
		&i.Manifest,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeployedAt,
	)
	return i, err
}

const upsertDeployment = `-- name: UpsertDeployment :one
INSERT INTO deployments (
    id,
    key, 
    name, 
    description, 
    guild_id, 
    plugin_version_id, 
    wasm_bytes, 
    manifest,
    config, 
    created_at, 
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
) ON CONFLICT (key, guild_id) DO UPDATE SET 
    name = EXCLUDED.name,
    description = EXCLUDED.description,
    plugin_version_id = EXCLUDED.plugin_version_id,
    wasm_bytes = EXCLUDED.wasm_bytes,
    manifest = EXCLUDED.manifest,
    config = EXCLUDED.config,
    updated_at = EXCLUDED.updated_at
RETURNING id, key, name, description, guild_id, plugin_version_id, wasm_bytes, manifest, config, created_at, updated_at, deployed_at
`

type UpsertDeploymentParams struct {
	ID              string
	Key             string
	Name            string
	Description     string
	GuildID         string
	PluginVersionID pgtype.Text
	WasmBytes       []byte
	Manifest        []byte
	Config          []byte
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
}

func (q *Queries) UpsertDeployment(ctx context.Context, arg UpsertDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, upsertDeployment,
		arg.ID,
		arg.Key,
		arg.Name,
		arg.Description,
		arg.GuildID,
		arg.PluginVersionID,
		arg.WasmBytes,
		arg.Manifest,
		arg.Config,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Description,
		&i.GuildID,
		&i.PluginVersionID,
		&i.WasmBytes,
		&i.Manifest,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeployedAt,
	)
	return i, err
}
