// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: guilds.sql

package pgmodel

import (
	"context"
	"database/sql"
	"time"
)

const getGuild = `-- name: GetGuild :one
SELECT id, name, icon, description, created_at, updated_at FROM guilds WHERE id = $1
`

func (q *Queries) GetGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGuilds = `-- name: GetGuilds :many
SELECT id, name, icon, description, created_at, updated_at FROM guilds ORDER BY name DESC
`

func (q *Queries) GetGuilds(ctx context.Context) ([]Guild, error) {
	rows, err := q.db.QueryContext(ctx, getGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upserGuild = `-- name: UpserGuild :one
INSERT INTO guilds (
    id, 
    name, 
    icon, 
    description, 
    created_at, 
    updated_at
) 
VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
) 
ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name, 
    icon = EXCLUDED.icon,
    description = EXCLUDED.description, 
    updated_at = $6 
RETURNING id, name, icon, description, created_at, updated_at
`

type UpserGuildParams struct {
	ID          string
	Name        string
	Icon        sql.NullString
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpserGuild(ctx context.Context, arg UpserGuildParams) (Guild, error) {
	row := q.db.QueryRowContext(ctx, upserGuild,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
