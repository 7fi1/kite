// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sessions.sql

package pgmodel

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
    token,
    type,
    user_id,
    guild_ids,
    access_token,
    retrieval_code,
    created_at,
    expires_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreateSessionParams struct {
	Token         string
	Type          string
	UserID        string
	GuildIds      []string
	AccessToken   string
	RetrievalCode sql.NullString
	CreatedAt     time.Time
	ExpiresAt     time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.Token,
		arg.Type,
		arg.UserID,
		pq.Array(arg.GuildIds),
		arg.AccessToken,
		arg.RetrievalCode,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const getSession = `-- name: GetSession :one
SELECT token, type, user_id, guild_ids, access_token, revoked, retrieval_code, created_at, expires_at FROM sessions WHERE token = $1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Type,
		&i.UserID,
		pq.Array(&i.GuildIds),
		&i.AccessToken,
		&i.Revoked,
		&i.RetrievalCode,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByRetrievalCode = `-- name: GetSessionByRetrievalCode :one
SELECT token, type, user_id, guild_ids, access_token, revoked, retrieval_code, created_at, expires_at FROM sessions WHERE retrieval_code = $1
`

func (q *Queries) GetSessionByRetrievalCode(ctx context.Context, retrievalCode sql.NullString) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByRetrievalCode, retrievalCode)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Type,
		&i.UserID,
		pq.Array(&i.GuildIds),
		&i.AccessToken,
		&i.Revoked,
		&i.RetrievalCode,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
