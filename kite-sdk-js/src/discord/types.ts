// Code generated by tygo. DO NOT EDIT.
type Nullable<T> = T | null
type Optional<T> = T | undefined
type IntOrString = number | string

//////////
// source: application.go

export interface Application {
  id: Snowflake;
  name: string;
  icon: Nullable<string>;
  description: string;
  rpc_origins?: string[];
  bot_public: boolean;
  bot_require_code_grant: boolean;
  bot?: Optional<User>;
  terms_of_service_url?: Optional<string>;
  privacy_policy_url?: Optional<string>;
  owner?: Optional<User>;
  summary: string;
  verify_key: string;
  team: Nullable<Team>;
  guild_id?: Optional<Snowflake>;
  guild?: Optional<Guild>;
  primary_sku_id?: Optional<Snowflake>;
  slug?: Optional<string>;
  cover_image?: Optional<string>;
  flags?: Optional<ApplicationFlags>;
  approximate_guild_count?: Optional<number /* int */>;
  redirect_uris?: string[];
  interactions_endpoint_url?: Optional<string>;
  role_connections_verification_url?: Optional<string>;
  tags?: string[];
  install_params?: Optional<InstallParams>;
  custom_install_url?: Optional<string>;
}
export type ApplicationFlags = number /* int */;
export const ApplicationFlagsAutoModerationRuleCreateBadge: ApplicationFlags = 1 << 6;
export const ApplicationFlagsGatewayPresence: ApplicationFlags = 1 << 12;
export const ApplicationFlagsGatewayPresenceLimited: ApplicationFlags = 1 << 13;
export const ApplicationFlagsGatewayGuildMembers: ApplicationFlags = 1 << 14;
export const ApplicationFlagsGatewayGuildMembersLimited: ApplicationFlags = 1 << 15;
export const ApplicationFlagsVerificationPendingGuildLimit: ApplicationFlags = 1 << 16;
export const ApplicationFlagsEmbedded: ApplicationFlags = 1 << 17;
export const ApplicationFlagsGatewayMessageContent: ApplicationFlags = 1 << 18;
export const ApplicationFlagsGatewayMessageContentLimited: ApplicationFlags = 1 << 19;
export const ApplicationFlagsApplicationCommandBadge: ApplicationFlags = 1 << 23;
export interface InstallParams {
  scopes: string[];
  permissions: Permissions;
}
export interface Team {
  icon: Nullable<string>;
  id: Snowflake;
  members: TeamMember[];
  name: string;
  owner_user_id: Snowflake;
}
export interface TeamMember {
  membership_state: MembershipState;
  team_id: Snowflake;
  user: User;
  role: TeamMemberRoleType;
}
export type MembershipState = number /* int */;
export const MembershipStateInvited: MembershipState = 1;
export const MembershipStateAccepted: MembershipState = 2;
export type TeamMemberRoleType = string;
export const TeamMemberRoleTypeAdmin: TeamMemberRoleType = "admin";
export const TeamMemberRoleTypeDeveloper: TeamMemberRoleType = "developer";
export const TeamMemberRoleReadOnly: TeamMemberRoleType = "read_only";

//////////
// source: ban.go

export interface Ban {
  reason: Nullable<string>;
  user: User;
}
export interface BanAddEvent {
  guild_id: Snowflake;
  user: User;
}
export interface BanRemoveEvent {
  guild_id: Snowflake;
  user: User;
}
export interface BanListRequest {
  guild_id: Snowflake;
  limit?: Optional<number /* int */>;
  before?: Optional<Snowflake>;
  after?: Optional<Snowflake>;
}
export type BanListResponse = Ban[];
export interface BanGetRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
}
export type BanGetResponse = Ban;
export interface BanCreateRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
  delete_message_seconds?: Optional<number /* int */>;
}
export type BanCreateResponse = Ban;
export interface BanRemoveRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
}
export type BanRemoveResponse = Ban;

//////////
// source: channel.go

export interface Channel {
  id: Snowflake;
  type: ChannelType;
  guild_id?: Optional<Snowflake>;
  position?: Optional<number /* int */>;
  permission_overwrites?: PermissionOverwrite[];
  name?: Optional<string>;
  topic?: Optional<string>;
  nsfw?: Optional<boolean>;
  last_message_id?: Optional<Snowflake>;
  bitrate?: Optional<number /* int */>;
  user_limit?: Optional<number /* int */>;
  rate_limit_per_user?: Optional<number /* int */>;
  recipients?: User[];
  icon?: Optional<Nullable<string>>;
  owner_id?: Optional<Snowflake>;
  application_id?: Optional<Snowflake>;
  managed?: Optional<boolean>;
  parent_id?: Optional<Snowflake>;
  last_pin_timestamp?: Optional<string /* RFC3339 */>;
  rtc_region?: Optional<string>;
  video_quality_mode?: Optional<VideoQualityMode>;
  message_count?: Optional<number /* int */>;
  member_count?: Optional<number /* int */>;
  thread_metadata?: Optional<ThreadMetadata>;
  member?: Optional<ThreadMember>;
  default_auto_archive_duration?: Optional<number /* int */>;
  permissions?: Optional<Permissions>;
  flags?: Optional<ChannelFlags>;
  total_message_sent?: Optional<number /* int */>;
  available_tags?: ForumTag[];
  applied_tags?: Snowflake[];
  default_reaction_emoji?: Optional<DefaultReaction>;
  default_thread_rate_limit_per_user?: Optional<number /* int */>;
  default_sort_order?: Optional<SortOrderType>;
  default_forum_layout?: Optional<ForumLayoutType>;
}
export type ChannelType = number /* int */;
export const ChannelTypeGuildText: ChannelType = 0;
export const ChannelTypeDM: ChannelType = 1;
export const ChannelTypeGuildVoice: ChannelType = 2;
export const ChannelTypeGroupDM: ChannelType = 3;
export const ChannelTypeGuildCategory: ChannelType = 4;
export const ChannelTypeGuildAnnouncement: ChannelType = 5;
export const ChannelTypeAnnouncementThread: ChannelType = 10;
export const ChannelTypePublicThread: ChannelType = 11;
export const ChannelTypePrivateThread: ChannelType = 12;
export const ChannelTypeGuildStageVoice: ChannelType = 13;
export const ChannelTypeGuildDirectory: ChannelType = 14;
export const ChannelTypeGuildForum: ChannelType = 15;
export const ChannelTypeGuildMedia: ChannelType = 16;
export type VideoQualityMode = number /* int */;
export const VideoQualityModeAuto: VideoQualityMode = 1;
export const VideoQualityModeFull: VideoQualityMode = 2;
export type ChannelFlags = number /* int */;
export const ChannelFlagsPinned: ChannelFlags = 1 << 1;
export const ChannelFlagsRequireTag: ChannelFlags = 1 << 4;
export const ChannelFlagsHideMediaDownloadOptions: ChannelFlags = 1 << 15;
export type SortOrderType = number /* int */;
export const SortOrderTypeLatestActivity: SortOrderType = 0;
export const SortOrderTypeCreationDate: SortOrderType = 1;
export type ForumLayoutType = number /* int */;
export const ForumLayoutTypeNotSet: ForumLayoutType = 0;
export const ForumLayoutTypeListView: ForumLayoutType = 1;
export const ForumLayoutTypeGalleryView: ForumLayoutType = 2;
export interface ForumTag {
  id: Snowflake;
  name: string;
  moderated: boolean;
  emoji_id: Nullable<Snowflake>;
  emoji_name: Nullable<string>;
}
export interface ThreadMetadata {
  archived: boolean;
  auto_archive_duration?: Optional<number /* int */>;
  archive_timestamp?: Optional<string /* RFC3339 */>;
  locked: boolean;
  invitable?: Optional<boolean>;
  create_timestamp?: Optional<string /* RFC3339 */>;
}
export interface ThreadMember {
  id?: Optional<Snowflake>;
  user_id?: Optional<Snowflake>;
  guild_id?: Optional<Snowflake>;
  join_timestamp: string /* RFC3339 */;
  flags: number /* int */;
  member?: Optional<Member>;
}
export interface DefaultReaction {
  emoji_id: Nullable<Snowflake>;
  emoji_name: Nullable<string>;
}
export interface PermissionOverwrite {
  id: Snowflake;
  type: PermissionOverwriteType;
  allow: Permissions;
  deny: Permissions;
}
export type PermissionOverwriteType = number /* int */;
export const PermissionOverwriteTypeRole: PermissionOverwriteType = 0;
export const PermissionOverwriteTypeMember: PermissionOverwriteType = 1;
export type ChannelCreateEvent = Channel;
export type ChannelUpdateEvent = Channel;
export type ChannelDeleteEvent = Channel;
export type ThreadCreateEvent = Channel;
export type ThreadUpdateEvent = Channel;
export type ThreadDeleteEvent = Channel;
export interface ThreadListSyncEvent {
  guild_id: Snowflake;
  channel_ids?: Snowflake[];
  threads: Channel[];
  members: ThreadMember[];
}
export type ThreadMemberUpdateEvent = ThreadMember;
export interface ThreadMembersUpdateEvent {
  id: Snowflake;
  guild_id: Snowflake;
  member_count: number /* int */;
  added_members?: ThreadMember[];
  removed_member_ids?: Snowflake[];
}
export interface ChannelPinsUpdateEvent {
  guild_id?: Optional<Snowflake>;
  channel_id: Snowflake;
  last_pin_timestamp?: Optional<string /* RFC3339 */>;
}
export interface ChannelGetRequest {
  channel_id: Snowflake;
}
export type ChannelGetResponse = Channel;
export interface ChannelModifyRequest {
} // TODO
export type ChannelModifyResponse = Channel;
export interface ChannelDeleteRequest {
  channel_id: Snowflake;
}
export type ChannelDeleteResponse = Channel;
export interface ChannelEditPermissionsRequest {
  channel_id: Snowflake;
  overwrite_id: Snowflake;
  allow?: Optional<Nullable<Permissions>>;
  deny?: Optional<Nullable<Permissions>>;
  type?: PermissionOverwriteType;
}
export interface ChannelEditPermissionsResponse {
}
export interface ChannelDeletePermissionsRequest {
  channel_id: Snowflake;
  overwrite_id: Snowflake;
}
export interface ChannelDeletePermissionsResponse {
}
export interface ThreadStartFromMessageRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  name: string;
  auto_archive_duration?: Optional<string /* RFC3339 */>;
  rate_limit: Optional<number /* int */>;
}
export type ThreadStartFromMessageResponse = Channel;
export interface ThreadStartWithoutMessageRequest {
  channel_id: Snowflake;
  name: string;
  auto_archive_duration?: Optional<string /* RFC3339 */>;
  type?: Optional<ChannelType>;
  invitable?: Optional<boolean>;
  rate_limit: Optional<number /* int */>;
}
export type ThreadStartWithoutMessageResponse = Channel;
export interface ThreadStartInForumRequest {
  channel_id: Snowflake;
  name: string;
  auto_archive_duration?: Optional<string /* RFC3339 */>;
  rate_limit: Optional<number /* int */>;
  message?: Optional<MessageCreateParams>;
  applied_tags?: Snowflake[];
}
export type ThreadStartInForumResponse = Channel;
export interface ThreadJoinRequest {
  channel_id: Snowflake;
}
export interface ThreadJoinResponse {
}
export interface ThreadMemberAddRequest {
  channel_id: Snowflake;
  user_id: Snowflake;
}
export interface ThreadMemberAddResponse {
}
export interface ThreadLeaveRequest {
  channel_id: Snowflake;
}
export interface ThreadLeaveResponse {
}
export interface ThreadMemberRemoveRequest {
  channel_id: Snowflake;
  user_id: Snowflake;
}
export interface ThreadMemberRemoveResponse {
}
export interface ThreadMemberGetRequest {
  channel_id: Snowflake;
  user_id: Snowflake;
}
export type ThreadMemberGetResponse = ThreadMember;
export interface ThreadMemberListRequest {
  channel_id: Snowflake;
  with_member?: Optional<boolean>;
  after?: Optional<Snowflake>;
  limit?: Optional<number /* int */>;
}
export type ThreadMemberListResponse = ThreadMember[];
export interface ThreadListPublicArchivedRequest {
  channel_id: Snowflake;
  before?: Optional<string /* RFC3339 */>;
  limit?: Optional<number /* int */>;
}
export interface ThreadListPublicArchivedResponse {
  threads: Channel[];
  members: ThreadMember[];
  has_more: boolean;
}
export interface ThreadListPrivateArchivedRequest {
  channel_id: Snowflake;
  before?: Optional<string /* RFC3339 */>;
  limit?: Optional<number /* int */>;
}
export interface ThreadListPrivateArchivedResponse {
  threads: Channel[];
  members: ThreadMember[];
  has_more: boolean;
}
export interface ThreadListJoinedPrivateArchivedRequest {
  channel_id: Snowflake;
  before?: Optional<string /* RFC3339 */>;
  limit?: Optional<number /* int */>;
}
export interface ThreadListJoinedPrivateArchivedResponse {
  threads: Channel[];
  members: ThreadMember[];
  has_more: boolean;
}
export interface GuildChannelListRequest {
  guild_id: Snowflake;
}
export type GuildChannelListResponse = Channel[];
export interface GuildChannelCreateRequest {
} // TODO
export type GuildChannelCreateResponse = Channel;
export type GuildChannelModifyPositionsRequest = GuildChannelModifyPositionsEntry[];
export interface GuildChannelModifyPositionsEntry {
  id: Snowflake;
  position: Optional<number /* int */>;
  lock_permissions: Optional<boolean>;
  parent_id: Optional<Snowflake>;
}
export interface GuildChannelModifyPositionsResponse {
}
export interface GuildThreadListActiveRequest {
  guild_id: Snowflake;
}
export interface GuildThreadListActiveResponse {
  threads: Channel[];
  members: ThreadMember[];
}

//////////
// source: component.go

export type MessageComponent = 
    any /* json.Marshaler */;
export type MessageComponentType = number /* int */;
export const MessageComponentTypeActionRow: MessageComponentType = 1;
export const MessageComponentTypeButton: MessageComponentType = 2;
export const MessageComponentTypeStringSelect: MessageComponentType = 3;
export const MessageComponentTypeTextInput: MessageComponentType = 4;
export const MessageComponentTypeUserSelect: MessageComponentType = 5;
export const MessageComponentTypeRoleSelect: MessageComponentType = 6;
export const MessageComponentTypeMentionableSelect: MessageComponentType = 7;
export const MessageComponentTypeChannelSelect: MessageComponentType = 8;
export interface ActionRow {
  components: MessageComponent[];
}
export interface Button {
  style: ButtonStyle;
  label?: Optional<string>;
  emoji?: Optional<Emoji>;
  custom_id?: Optional<string>;
  url?: Optional<string>;
  disabled?: Optional<boolean>;
}
export type ButtonStyle = number /* int */;
export const ButtonStylePrimary: ButtonStyle = 1;
export const ButtonStyleSecondary: ButtonStyle = 2;
export const ButtonStyleSuccess: ButtonStyle = 3;
export const ButtonStyleDanger: ButtonStyle = 4;
export const ButtonStyleLink: ButtonStyle = 5;
export interface SelectMenu {
  type: SelectMenuType;
  custom_id: string;
  options?: SelectOption[];
  channel_types?: ChannelType[];
  placeholder?: Optional<string>;
  default_values?: SelectDefaultValue[];
  min_values?: Optional<number /* int */>;
  max_values?: Optional<number /* int */>;
  disabled?: Optional<boolean>;
}
export type SelectMenuType = number /* int */;
export const SelectMenuTypeString: SelectMenuType = 3;
export const SelectMenuTypeChannel: SelectMenuType = 8;
export const SelectMenuTypeUser: SelectMenuType = 5;
export const SelectMenuTypeRole: SelectMenuType = 6;
export const SelectMenuTypeMentionable: SelectMenuType = 7;
export interface SelectOption {
  label: string;
  value: string;
  description?: Optional<string>;
  emoji?: Optional<Emoji>;
  default?: Optional<boolean>;
}
export interface SelectDefaultValue {
  id: string;
  type: SelectDefaultValueType;
}
export type SelectDefaultValueType = string;
export const SelectDefaultValueTypeUser: SelectDefaultValueType = "user";
export const SelectDefaultValueTypeRole: SelectDefaultValueType = "role";
export const SelectDefaultValueTypeChannel: SelectDefaultValueType = "channel";
export interface TextInput {
  custom_id: string;
  style: TextInputStyle;
  label: string;
  min_length?: Optional<number /* int */>;
  max_length?: Optional<number /* int */>;
  required?: Optional<boolean>;
  value?: Optional<string>;
  placeholder?: Optional<string>;
}
export type TextInputStyle = number /* int */;
export const TextInputStyleShort: TextInputStyle = 1;
export const TextInputStyleParagraph: TextInputStyle = 2;

//////////
// source: emoji.go

export interface Emoji {
  id: Nullable<Snowflake>;
  name: Nullable<string>;
  roles?: Snowflake[];
  user?: Optional<User>;
  required_colons?: Optional<boolean>;
  managed?: Optional<boolean>;
  animated?: Optional<boolean>;
  available?: Optional<boolean>;
}
export interface GuildEmojisUpdateEvent {
  guild_id: Snowflake;
  emojis: Emoji[];
}
export interface GuildEmojiListRequest {
  guild_id: Snowflake;
}
export type GuildEmojiListResponse = Emoji[];
export interface EmojiGetRequest {
  guild_id: Snowflake;
  emoji_id: Snowflake;
}
export type EmojiGetResponse = Emoji;
export interface EmojiCreateRequest {
  guild_id: Snowflake;
  name: string;
  image: string;
  roles?: Snowflake[];
}
export type EmojiCreateResponse = Emoji;
export interface EmojiModifyRequest {
  guild_id: Snowflake;
  emoji_id: Snowflake;
  name: string;
  roles?: Snowflake[];
}
export type EmojiModifyResponse = Emoji;
export interface EmojiDeleteRequest {
  guild_id: Snowflake;
  emoji_id: Snowflake;
}
export interface EmojiDeleteResponse {
}

//////////
// source: entitlement.go

export interface Entitlement {
  id: Snowflake;
  sku_id: Snowflake;
  application_id: Snowflake;
  user_id?: Optional<Snowflake>;
  type: EntitlementType;
  deleted: boolean;
  starts_at?: Optional<string>;
  ends_at?: Optional<string>;
  guild_id?: Optional<Snowflake>;
}
export type EntitlementType = number /* int */;
export const EntitlementTypeApplicationSubscription: EntitlementType = 8;

//////////
// source: error.go

export interface RestErrorMessage {
  code: number /* int */;
  message: string;
}
export interface RestTooManyRequests {
  bucket: string;
  message: string;
  retry_after: any /* time.Duration */;
}

//////////
// source: event.go

export type EventType = string;
export const EventTypeHello: EventType = "HELLO";
export const EventTypeReady: EventType = "READY";
export const EventTypeResumed: EventType = "RESUMED";
export const EventTypeReconnect: EventType = "RECONNECT";
export const EventTypeInvalidSession: EventType = "INVALID_SESSION";
export const EventTypeApplicationCommandPermissions: EventType = "APPLICATION_COMMAND_PERMISSIONS";
export const EventTypeAutoModerationRuleCreate: EventType = "AUTO_MODERATION_RULE_CREATE";
export const EventTypeAutoModerationRuleUpdate: EventType = "AUTO_MODERATION_RULE_UPDATE";
export const EventTypeAutoModerationRuleDelete: EventType = "AUTO_MODERATION_RULE_DELETE";
export const EventTypeAutoModerationActionExecution: EventType = "AUTO_MODERATION_ACTION_EXECUTION";
export const EventTypeChannelCreate: EventType = "CHANNEL_CREATE";
export const EventTypeChannelUpdate: EventType = "CHANNEL_UPDATE";
export const EventTypeChannelDelete: EventType = "CHANNEL_DELETE";
export const EventTypeChannelPinsUpdate: EventType = "CHANNEL_PINS_UPDATE";
export const EventTypeThreadCreate: EventType = "THREAD_CREATE";
export const EventTypeThreadUpdate: EventType = "THREAD_UPDATE";
export const EventTypeThreadDelete: EventType = "THREAD_DELETE";
export const EventTypeThreadListSync: EventType = "THREAD_LIST_SYNC";
export const EventTypeThreadMemberUpdate: EventType = "THREAD_MEMBER_UPDATE";
export const EventTypeThreadMembersUpdate: EventType = "THREAD_MEMBERS_UPDATE";
export const EventTypeEntitlementCreate: EventType = "ENTITLEMENT_CREATE";
export const EventTypeEntitlementUpdate: EventType = "ENTITLEMENT_UPDATE";
export const EventTypeEntitlementDelete: EventType = "ENTITLEMENT_DELETE";
export const EventTypeGuildCreate: EventType = "GUILD_CREATE";
export const EventTypeGuildUpdate: EventType = "GUILD_UPDATE";
export const EventTypeGuildDelete: EventType = "GUILD_DELETE";
export const EventTypeGuildAuditLogEntryCreate: EventType = "GUILD_AUDIT_LOG_ENTRY_CREATE";
export const EventTypeGuildBanAdd: EventType = "GUILD_BAN_ADD";
export const EventTypeGuildBanRemove: EventType = "GUILD_BAN_REMOVE";
export const EventTypeGuildEmojisUpdate: EventType = "GUILD_EMOJIS_UPDATE";
export const EventTypeGuildStickersUpdate: EventType = "GUILD_STICKERS_UPDATE";
export const EventTypeGuildIntegrationsUpdate: EventType = "GUILD_INTEGRATIONS_UPDATE";
export const EventTypeGuildMemberAdd: EventType = "GUILD_MEMBER_ADD";
export const EventTypeGuildMemberRemove: EventType = "GUILD_MEMBER_REMOVE";
export const EventTypeGuildMemberUpdate: EventType = "GUILD_MEMBER_UPDATE";
export const EventTypeGuildMembersChunk: EventType = "GUILD_MEMBERS_CHUNK";
export const EventTypeGuildRoleCreate: EventType = "GUILD_ROLE_CREATE";
export const EventTypeGuildRoleUpdate: EventType = "GUILD_ROLE_UPDATE";
export const EventTypeGuildRoleDelete: EventType = "GUILD_ROLE_DELETE";
export const EventTypeGuildScheduledEventCreate: EventType = "GUILD_SCHEDULED_EVENT_CREATE";
export const EventTypeGuildScheduledEventUpdate: EventType = "GUILD_SCHEDULED_EVENT_UPDATE";
export const EventTypeGuildScheduledEventDelete: EventType = "GUILD_SCHEDULED_EVENT_DELETE";
export const EventTypeGuildScheduledEventUserAdd: EventType = "GUILD_SCHEDULED_EVENT_USER_ADD";
export const EventTypeGuildScheduledEventUserRemove: EventType = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
export const EventTypeIntegrationCreate: EventType = "INTEGRATION_CREATE";
export const EventTypeIntegrationUpdate: EventType = "INTEGRATION_UPDATE";
export const EventTypeIntegrationDelete: EventType = "INTEGRATION_DELETE";
export const EventTypeInteractionCreate: EventType = "INTERACTION_CREATE";
export const EventTypeInviteCreate: EventType = "INVITE_CREATE";
export const EventTypeInviteDelete: EventType = "INVITE_DELETE";
export const EventTypeMessageCreate: EventType = "MESSAGE_CREATE";
export const EventTypeMessageUpdate: EventType = "MESSAGE_UPDATE";
export const EventTypeMessageDelete: EventType = "MESSAGE_DELETE";
export const EventTypeMessageDeleteBulk: EventType = "MESSAGE_DELETE_BULK";
export const EventTypeMessageReactionAdd: EventType = "MESSAGE_REACTION_ADD";
export const EventTypeMessageReactionRemove: EventType = "MESSAGE_REACTION_REMOVE";
export const EventTypeMessageReactionRemoveAll: EventType = "MESSAGE_REACTION_REMOVE_ALL";
export const EventTypeMessageReactionRemoveEmoji: EventType = "MESSAGE_REACTION_REMOVE_EMOJI";
export const EventTypePresenceUpdate: EventType = "PRESENCE_UPDATE";
export const EventTypeStageInstanceCreate: EventType = "STAGE_INSTANCE_CREATE";
export const EventTypeStageInstanceUpdate: EventType = "STAGE_INSTANCE_UPDATE";
export const EventTypeStageInstanceDelete: EventType = "STAGE_INSTANCE_DELETE";
export const EventTypeTypingStart: EventType = "TYPING_START";
export const EventTypeUserUpdate: EventType = "USER_UPDATE";
export const EventTypeVoiceStateUpdate: EventType = "VOICE_STATE_UPDATE";
export const EventTypeVoiceServerUpdate: EventType = "VOICE_SERVER_UPDATE";
export const EventTypeWebhooksUpdate: EventType = "WEBHOOKS_UPDATE";

//////////
// source: guild.go

export interface Guild {
  id: Snowflake;
  name: string;
  icon: Nullable<string>;
  icon_hash?: Optional<Nullable<string>>;
  splash: Nullable<string>;
  discovery_splash: Nullable<string>;
  owner?: Optional<boolean>;
  owner_id: Snowflake;
  permissions?: Optional<Permissions>;
  region?: Optional<string>;
  afk_channel_id: Nullable<Snowflake>;
  afk_timeout: number /* int */;
  widget_enabled?: Optional<boolean>;
  widget_channel_id?: Optional<Nullable<Snowflake>>;
  verification_level: VerificationLevel;
  default_message_notifications: DefaultMessageNotificationlevel;
  explicit_content_filter: ExplicitContentFilterLevel;
  roles: Role[];
  emojis: Emoji[];
  features: string[];
  mfa_level: MFALevel;
  application_id: Nullable<Snowflake>;
  system_channel_id: Nullable<Snowflake>;
  system_channel_flags: SystemChannelFlags;
  max_presences?: Optional<Nullable<number /* int */>>;
  max_members?: Optional<number /* int */>;
  vanity_url_code: Nullable<string>;
  description: Nullable<string>;
  banner: Nullable<string>;
  premium_tier: PremiumTier;
  premium_subscription_count?: Optional<number /* int */>;
  preferred_locale: string;
  public_updates_channel_id: Nullable<Snowflake>;
  max_video_channel_users?: Optional<number /* int */>;
  max_stage_video_channel_users?: Optional<number /* int */>;
  approximate_member_count?: Optional<number /* int */>;
  approximate_presence_count?: Optional<number /* int */>;
  welcome_screen?: Optional<WelcomeScreen>;
  nsfw_level: GuildNSFWLevel;
  stickers?: Sticker[];
  premium_progress_bar_enabled: boolean;
  safety_alerts_channel_id: Nullable<Snowflake>;
}
export interface UnavailableGuild {
  id: Snowflake;
  unavailable: boolean;
}
export type DefaultMessageNotificationlevel = number /* int */;
export const DefaultMessageNotificationLevelAllMessages: DefaultMessageNotificationlevel = 0;
export const DefaultMessageNotificationLevelOnlyMentions: DefaultMessageNotificationlevel = 1;
export type ExplicitContentFilterLevel = number /* int */;
export const ExplicitContentFilterLevelDisabled: ExplicitContentFilterLevel = 0;
export const ExplicitContentFilterLevelMembersWithoutRoles: ExplicitContentFilterLevel = 1;
export const ExplicitContentFilterLevelAllMembers: ExplicitContentFilterLevel = 2;
export type MFALevel = number /* int */;
export const MFALevelNone: MFALevel = 0;
export const MFALevelElevated: MFALevel = 1;
export type VerificationLevel = number /* int */;
export const VerificationLevelNone: VerificationLevel = 0;
export const VerificationLevelLow: VerificationLevel = 1;
export const VerificationLevelMedium: VerificationLevel = 2;
export const VerificationLevelHigh: VerificationLevel = 3;
export const VerificationLevelVeryHigh: VerificationLevel = 4;
export type GuildNSFWLevel = number /* int */;
export const GuildNSFWLevelDefault: GuildNSFWLevel = 0;
export const GuildNSFWLevelExplicit: GuildNSFWLevel = 1;
export const GuildNSFWLevelSafe: GuildNSFWLevel = 2;
export const GuildNSFWLevelAgeRestricted: GuildNSFWLevel = 3;
export type PremiumTier = number /* int */;
export const PremiumTierNone: PremiumTier = 0;
export const PremiumTier1: PremiumTier = 1;
export const PremiumTier2: PremiumTier = 2;
export const PremiumTier3: PremiumTier = 3;
export type SystemChannelFlags = number /* int */;
export const SystemChannelFlagsSuppressJoinNotifications: SystemChannelFlags = 1 << 0;
export const SystemChannelFlagsSuppressPremiumSubscriptions: SystemChannelFlags = 1 << 1;
export const SystemChannelFlagsSuppressGuildReminderNotifications: SystemChannelFlags = 1 << 2;
export const SystemChannelFlagsSuppressJoinNotificationReplies: SystemChannelFlags = 1 << 3;
export const SystemChannelFlagsSuppressRoleSubscriptionPurchaseNotifications: SystemChannelFlags = 1 << 4;
export const SystemChannelFlagsSuppressRoleSubscriptionPurchaseNotificationReplies: SystemChannelFlags = 1 << 5;
export interface WelcomeScreen {
  description: Nullable<string>;
  welcome_channels: WelcomeScreenChannel[];
}
export interface WelcomeScreenChannel {
  channel_id: Snowflake;
  description: string;
  emoji_id: Nullable<Snowflake>;
  emoji_name: Nullable<string>;
}
export type GuildCreateEvent = Guild;
export type GuildUpdateEvent = Guild;
export type GuildDeleteEvent = UnavailableGuild;
export interface GuildGetRequest {
  guild_id: Snowflake;
}
export type GuildGetResponse = Guild;
export interface GuildUpdateRequest {
  guild_id: Snowflake;
  name?: Optional<string>;
  region?: Optional<Nullable<string>>;
  verification_level?: Optional<VerificationLevel>;
  default_message_notifications?: Optional<DefaultMessageNotificationlevel>;
  explicit_content_filter?: Optional<ExplicitContentFilterLevel>;
  afk_channel_id?: Optional<Nullable<Snowflake>>;
  afk_timeout?: Optional<number /* int */>;
  icon?: Optional<Nullable<string>>;
  owner_id?: Optional<Snowflake>;
  splash?: Optional<Nullable<string>>;
  discovery_splash?: Optional<Nullable<string>>;
  banner?: Optional<Nullable<string>>;
  system_channel_id?: Optional<Nullable<Snowflake>>;
  system_channel_flags?: Optional<SystemChannelFlags>;
  rules_channel_id?: Optional<Nullable<Snowflake>>;
  public_updates_channel_id?: Optional<Nullable<Snowflake>>;
  preferred_locale?: Optional<Nullable<string>>;
  features?: string[];
  description?: Optional<Nullable<string>>;
  premium_progress_bar_enabled?: Optional<boolean>;
  safety_alerts_channel_id?: Optional<Nullable<Snowflake>>;
}
export type GuildUpdateResponse = Guild;

//////////
// source: integration.go

export interface Integration {
  id: Snowflake;
  name: string;
  type: IntegrationType;
  enabled: boolean;
  syncing?: Optional<boolean>;
  role_id?: Optional<Snowflake>;
  enable_emoticons?: Optional<boolean>;
  expire_behavior?: Optional<IntegrationExpireBehavior>;
  expire_grace_period?: Optional<number /* int */>;
  user?: Optional<User>;
  account: IntegrationAccount;
  synced_at?: Optional<string /* RFC3339 */>;
  subscriber_count?: Optional<number /* int */>;
  revoked?: Optional<boolean>;
  application?: Optional<Application>;
  scopes?: string[];
}
export type IntegrationType = string;
export const IntegrationTypeTwitch: IntegrationType = "twitch";
export const IntegrationTypeYouTube: IntegrationType = "youtube";
export const IntegrationTypeDiscord: IntegrationType = "discord";
export const IntegrationTypeGuildSubscription: IntegrationType = "guild_subscription";
export type IntegrationExpireBehavior = number /* int */;
export const IntegrationExpireBehaviorRemoveRole: IntegrationExpireBehavior = 0;
export const IntegrationExpireBehaviorKick: IntegrationExpireBehavior = 1;
export interface IntegrationAccount {
  id: string;
  name: string;
}
export interface GuildIntegrationsUpdateEvent {
  guild_id: Snowflake;
}
export type IntegrationCreateEvent = Integration;
export type IntegrationUpdateEvent = Integration;
export interface IntegrationDeleteEvent {
  id: Snowflake;
  guild_id: Snowflake;
  application_id?: Optional<Snowflake>;
}
export interface GuildIntegrationListRequest {
  guild_id: Snowflake;
}
export type GuildIntegrationListResponse = Integration[];
export interface GuildIntegrationDeleteRequest {
  guild_id: Snowflake;
  integration_id: Snowflake;
}
export interface GuildIntegtrationDeleteResponse {
}

//////////
// source: interaction.go

export interface Interaction {
  id: Snowflake;
  application_id: Snowflake;
  type: InteractionType;
  data?: InteractionData;
  guild_id?: Optional<Snowflake>;
  channel?: Optional<Channel>;
  channel_id?: Optional<Snowflake>;
  member?: Optional<Member>;
  user?: Optional<User>;
  token: string;
  version: number /* int */;
  message?: Optional<Message>;
  app_permissions?: Optional<string>;
  locale?: Optional<string>;
  guild_locale?: Optional<string>;
  entitlements?: Entitlement[];
}
export type InteractionData = any;
export type InteractionType = number /* int */;
export const InteractionTypePing: InteractionType = 1;
export const InteractionTypeApplicationCommand: InteractionType = 2;
export const InteractionTypeMessageComponent: InteractionType = 3;
export const InteractionTypeApplicationCommandAutocomplete: InteractionType = 4;
export const InteractionTypeModalSubmit: InteractionType = 5;
export interface ApplicationCommandData {
  id: Snowflake;
  name: string;
  type: ApplicationCommandType;
  resolved?: Optional<ResolvedData>;
  options?: ApplicationCommandOption[];
  guild_id?: Optional<Snowflake>;
  target_id?: Optional<Snowflake>;
}
export type ApplicationCommandType = number /* int */;
export const ApplicationCommandTypeChatInput: ApplicationCommandType = 1;
export const ApplicationCommandTypeUser: ApplicationCommandType = 2;
export const ApplicationCommandTypeMessage: ApplicationCommandType = 3;
export interface ApplicationCommandOption {
  name: string;
  type: ApplicationCommandOptionType;
  value?: Optional<any>;
  options?: ApplicationCommandOption[];
  focused?: Optional<boolean>;
}
export type ApplicationCommandOptionType = number /* int */;
export const ApplicationCommandOptionTypeSubCommand: ApplicationCommandOptionType = 1;
export const ApplicationCommandOptionTypeSubCommandGroup: ApplicationCommandOptionType = 2;
export const ApplicationCommandOptionTypeString: ApplicationCommandOptionType = 3;
export const ApplicationCommandOptionTypeInteger: ApplicationCommandOptionType = 4;
export const ApplicationCommandOptionTypeBoolean: ApplicationCommandOptionType = 5;
export const ApplicationCommandOptionTypeUser: ApplicationCommandOptionType = 6;
export const ApplicationCommandOptionTypeChannel: ApplicationCommandOptionType = 7;
export const ApplicationCommandOptionTypeRole: ApplicationCommandOptionType = 8;
export const ApplicationCommandOptionTypeMentionable: ApplicationCommandOptionType = 9;
export const ApplicationCommandOptionTypeNumber: ApplicationCommandOptionType = 10;
export const ApplicationCommandOptionTypeAttachment: ApplicationCommandOptionType = 11;
export interface MessageComponentData {
  custom_id: string;
  component_type: MessageComponentType;
  values?: string[];
  resolved?: Optional<ResolvedData>;
}
export interface ModalSubmitData {
  custom_id: string;
  components: MessageComponent[]; // TODO: implement unmarshalJSON for MessageComponent
}
export interface ResolvedData {
  users?: { [key: Snowflake]: User};
  members?: { [key: Snowflake]: Member};
  roles?: { [key: Snowflake]: Role};
  channels?: { [key: Snowflake]: Channel};
  messages?: { [key: Snowflake]: Message};
  attachments?: { [key: Snowflake]: Attachment};
}
export interface InteractionResponse {
  type: InteractionResponseType;
  data?: InteractionResponseData; // TODO: implement unmarshaler
}
export type InteractionResponseType = number /* int */;
export const InteractionResponseTypePong: InteractionResponseType = 1;
export const InteractionResponseTypeChannelMessageWithSource: InteractionResponseType = 4;
export const InteractionResponseTypeDeferredChannelMessageWithSource: InteractionResponseType = 5;
export const InteractionResponseTypeDeferredUpdateMessage: InteractionResponseType = 6;
export const InteractionResponseTypeUpdateMessage: InteractionResponseType = 7;
export const InteractionResponseTypeApplicationCommandAutocompleteResult: InteractionResponseType = 8;
export const InteractionResponseTypeModal: InteractionResponseType = 9;
export const InteractionResponseTypePremiumRequired: InteractionResponseType = 10;
export type InteractionResponseData = any;
export interface InteractionMessageResponse {
} // TODO
export interface InteractionAutocompleteResponse {
} // TODO
export interface InteractionModalResponse {
} // TODO
export type InteractionCreateEvent = Interaction;
export interface InteractionResponseCreateRequest {
  interaction_id: Snowflake;
  interaction_token: string;
  InteractionResponse: InteractionResponse;
}
export interface InteractionResponseCreateResponse {
}
export interface InteractionResponseGetRequest {
  application_id: Snowflake;
  interaction_token: string;
}
export type InteractionResponseGetResponse = Message;
export interface InteractionResponseEditRequest {
  application_id: Snowflake;
  interaction_token: string;
  MessageEditParams: MessageEditParams;
}
export type InteractionResponseEditResponse = Message;
export interface InteractionResponseDeleteRequest {
  application_id: Snowflake;
  interaction_token: string;
}
export interface InteractionResponseDeleteResponse {
}
export interface InteractionFollowupCreateRequest {
  application_id: Snowflake;
  interaction_token: string;
  MessageCreateParams: MessageCreateParams;
}
export type InteractionFollowupCreateResponse = Message;
export interface InteractionFollowupGetRequest {
  application_id: Snowflake;
  interaction_token: string;
  message_id: Snowflake;
}
export type InteractionFollowupGetResponse = Message;
export interface InteractionFollowupEditRequest {
  application_id: Snowflake;
  interaction_token: string;
  message_id: Snowflake;
  MessageEditParams: MessageEditParams;
}
export type InteractionFollowupEditResponse = Message;
export interface InteractionFollowupDeleteRequest {
  application_id: Snowflake;
  interaction_token: string;
  message_id: Snowflake;
}
export interface InteractionFollowupDeleteResponse {
}

//////////
// source: invite.go

export interface Invite {
  code: string;
  guild?: Optional<Guild>;
  channel: Nullable<Channel>;
  inviter?: Optional<User>;
  target_type?: Optional<InviteTargetType>;
  target_user?: Optional<User>;
  target_application?: Optional<Application>;
  approximate_presence_count?: Optional<number /* int */>;
  approximate_member_count?: Optional<number /* int */>;
  expires_at?: Optional<Nullable<string>>;
  stage_instance?: Optional<StageInstance>;
  guild_scheduled_event?: Optional<ScheduledEvent>;
  /**
   * Extra metadata for the invite, like the number of times it's been used
   */
  uses: Optional<number /* int */>;
  max_uses: Optional<number /* int */>;
  max_age: Optional<number /* int */>;
  temporary: Optional<boolean>;
  created_at: Optional<string /* RFC3339 */>;
}
export type InviteTargetType = number /* int */;
export const InviteTargetTypeStream: InviteTargetType = 1;
export const InviteTargetTypeEmbeddedApplication: InviteTargetType = 2;
export interface InviteCreateEvent {
  channel_id: Snowflake;
  code: string;
  created_at: string /* RFC3339 */;
  guild_id?: Optional<Snowflake>;
  inviter?: Optional<User>;
  max_age: number /* int */;
  max_uses: number /* int */;
  target_type: Optional<InviteTargetType>;
  target_user?: Optional<User>;
  target_application?: Optional<Application>;
  temporary: boolean;
  uses: number /* int */;
}
export interface InviteDeleteEvent {
  channel_id: Snowflake;
  guild_id?: Optional<Snowflake>;
  code: string;
}
export interface InviteGetRequest {
  code: string;
  with_counts?: Optional<boolean>;
  with_expiration?: Optional<boolean>;
  guild_scheduled_event_id?: Optional<Snowflake>;
}
export type InviteGetResponse = Invite;
export interface InviteDeleteRequest {
  code: string;
}
export type InviteDeleteResponse = Invite;
export interface GuildInviteListRequest {
  guild_id: Snowflake;
}
export type GuildInviteListResponse = Invite[];
export interface ChannelInviteListRequest {
  channel_id: Snowflake;
}
export type ChannelInviteListResponse = Invite[];
export interface ChannelInviteCreateRequest {
  channel_id: Snowflake;
  max_age?: Optional<number /* int */>;
  max_uses?: Optional<number /* int */>;
  temporary?: Optional<boolean>;
  unique?: Optional<boolean>;
  target_type?: Optional<InviteTargetType>;
  target_user_id?: Optional<Snowflake>;
  target_application_id?: Optional<Snowflake>;
}
export type ChannelInviteCreateResponse = Invite;

//////////
// source: member.go

export interface Member {
  user?: Optional<User>;
  nick?: Optional<Nullable<string>>;
  avatar?: Optional<Nullable<string>>;
  roles: Snowflake[];
  joined_at: string /* RFC3339 */;
  premium_since?: Optional<string /* RFC3339 */>;
  deaf: boolean;
  mute: boolean;
  flags: MemberFlags;
  pending?: Optional<boolean>;
  permissions?: Optional<Permissions>;
  communication_disabled_until?: Optional<string /* RFC3339 */>;
}
export type MemberFlags = number /* int */;
export const MemberFlagsDidRejoin: MemberFlags = 1 << 0;
export const MemberFlagsCompletedOnboarding: MemberFlags = 1 << 1;
export const MemberFlagsBypassesVerification: MemberFlags = 1 << 2;
export const MemberFlagsStartedOnboarding: MemberFlags = 1 << 3;
export interface MemberAddEvent {
  Member: Member;
  guild_id: Snowflake;
}
export interface MemberRemoveEvent {
  user: User;
  guild_id: Snowflake;
}
export type MemberUpdateEvent = Member;
export interface MemberChunkEvent {
  guild_id: Snowflake;
  members: Member[];
  chunk_index: number /* int */;
  chunk_count: number /* int */;
  not_found?: Snowflake[];
  nonce?: string;
}
export interface MemberGetRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
}
export type MemberGetResponse = Member;
export interface GuildMemberListRequest {
  guild_id: Snowflake;
  limit?: Optional<number /* int */>;
  after?: Optional<Snowflake>;
}
export type GuildMemberListResponse = Member[];
export interface GuildMemberSearchRequest {
  guild_id: Snowflake;
  query: string;
  limit?: Optional<number /* int */>;
}
export type GuildMemberSearchResponse = Member[];
export interface MemberAddRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
  access_token: string;
  nick?: Optional<string>;
  roles?: Snowflake[];
  mute?: Optional<boolean>;
  deaf?: Optional<boolean>;
}
export interface MemberModifyRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
  nick?: Optional<string>;
  roles?: Snowflake[];
  mute?: Optional<boolean>;
  deaf?: Optional<boolean>;
  channel_id?: Optional<Snowflake>;
  communication_disabled_until?: Optional<string /* RFC3339 */>;
  flags?: Optional<MemberFlags>;
}
export type MemberModifyResponse = Member;
export interface MemberModifyCurrentRequest {
  guild_id: Snowflake;
  nick?: Optional<string>;
}
export interface MemberModifyCurrentResponse {
}
export interface MemberRoleAddRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
  role_id: Snowflake;
}
export interface MemberRoleAddResponse {
}
export interface MemberRoleRemoveRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
  role_id: Snowflake;
}
export interface MemberRoleRemoveResponse {
}
export interface MemberRemoveRequest {
  guild_id: Snowflake;
  user_id: Snowflake;
}
export interface MemberRemoveResponse {
}
export interface MemberPruneCountRequest {
  guild_id: Snowflake;
  days: number /* int */;
  include_roles?: Snowflake[];
}
export interface MemberPruneCountResponse {
  pruned: number /* int */;
}
export interface MemberPruneRequest {
  guild_id: Snowflake;
  days: number /* int */;
  compute_prune_count?: Optional<boolean>;
  include_roles?: Snowflake[];
}
export interface MemberPruneResponse {
  pruned: Nullable<number /* int */>;
}

//////////
// source: message.go

export interface Message {
  id: Snowflake;
  channel_id: Snowflake;
  author: User;
  content: string;
  timestamp: string /* RFC3339 */;
  edited_timestamp: Nullable<string /* RFC3339 */>;
  tts: boolean;
  mention_everyone: boolean;
  mentions: User[];
  mention_roles: Snowflake[];
  mention_channels?: ChannelMention[];
  attachments: Attachment[];
  embeds: Embed[];
  reactions?: Reaction[];
  nonce?: Optional<IntOrString>;
  pinned: boolean;
  webhook_id?: Optional<Snowflake>;
  type: MessageType;
  activity?: Optional<MessageActivity>;
  application?: Optional<Application>;
  application_id?: Optional<Snowflake>;
  message_reference?: Optional<MessageReference>;
  flags?: Optional<MessageFlags>;
  referenced_message?: Optional<Nullable<Message>>;
  interaction?: Optional<MessageInteraction>;
  thread?: Optional<Channel>;
  components?: MessageComponent[];
  sticker_items?: MessageStickerItem[];
  stickers?: Sticker[];
  position?: Optional<number /* int */>;
  role_subscription_data?: Optional<RoleSubscriptionData>;
  resolved?: Optional<ResolvedData>;
}
export type MessageType = number /* int */;
export const MessageTypeDefault: MessageType = 0;
export const MessageTypeRecipientAdd: MessageType = 1;
export const MessageTypeRecipientRemove: MessageType = 2;
export const MessageTypeCall: MessageType = 3;
export const MessageTypeChannelNameChange: MessageType = 4;
export const MessageTypeChannelIconChange: MessageType = 5;
export const MessageTypeChannelPinnedMessage: MessageType = 6;
export const MessageTypeUserJoin: MessageType = 7;
export const MessageTypeGuildBoost: MessageType = 8;
export const MessageTypeGuildBoostTier1: MessageType = 9;
export const MessageTypeGuildBoostTier2: MessageType = 10;
export const MessageTypeGuildBoostTier3: MessageType = 11;
export const MessageTypeChannelFollowAdd: MessageType = 12;
export const MessageTypeGuildDiscoveryDisqualified: MessageType = 14;
export const MessageTypeGuildDiscoveryRequalified: MessageType = 15;
export const MessageTypeGuildDiscoveryGracePeriodInitialWarning: MessageType = 16;
export const MessageTypeGuildDiscoveryGracePeriodFinalWarning: MessageType = 17;
export const MessageTypeThreadCreated: MessageType = 18;
export const MessageTypeReply: MessageType = 19;
export const MessageTypeChatInputCommand: MessageType = 20;
export const MessageTypeThreadStarterMessage: MessageType = 21;
export const MessageTypeGuildInviteReminder: MessageType = 22;
export const MessageTypeContextMenuCommand: MessageType = 23;
export const MessageTypeAutoModerationAction: MessageType = 24;
export const MessageTypeRoleSubscriptionPurchase: MessageType = 25;
export const MessageTypeInteractionPremiumUpsell: MessageType = 26;
export const MessageTypeStageStart: MessageType = 27;
export const MessageTypeStageEnd: MessageType = 28;
export const MessageTypeStageSpeaker: MessageType = 29;
export const MessageTypeStageTopic: MessageType = 31;
export const MessageTypeGuildApplicationPremiumSubscription: MessageType = 32;
export interface MessageActivity {
  type: MessageActivityType;
  party_id: string;
}
export type MessageActivityType = number /* int */;
export const MessageActivityTypeJoin: MessageActivityType = 1;
export const MessageActivityTypeSpectate: MessageActivityType = 2;
export const MessageActivityTypeListen: MessageActivityType = 3;
export const MessageActivityTypeJoinRequest: MessageActivityType = 5;
export type MessageFlags = number /* int */;
export const MessageFlagsCrossposted: MessageFlags = 1 << 0;
export const MessageFlagsIsCrosspost: MessageFlags = 1 << 1;
export const MessageFlagsSuppressEmbeds: MessageFlags = 1 << 2;
export const MessageFlagsSourceMessageDeleted: MessageFlags = 1 << 3;
export const MessageFlagsUrgent: MessageFlags = 1 << 4;
export const MessageFlagsHasThread: MessageFlags = 1 << 5;
export const MessageFlagsEphemeral: MessageFlags = 1 << 6;
export const MessageFlagsLoading: MessageFlags = 1 << 7;
export const MessageFlagsFailedToMentionSomeRolesInThread: MessageFlags = 1 << 8;
export const MessageFlagsSuppressNotifications: MessageFlags = 1 << 12;
export const MessageFlagsIsVoiceMessage: MessageFlags = 1 << 13;
export interface MessageReference {
  message_id?: Optional<Snowflake>;
  channel_id?: Optional<Snowflake>;
  guild_id?: Optional<Snowflake>;
  fail_if_not_exists?: Optional<boolean>;
}
export interface Reaction {
  count: number /* int */;
  count_details: ReactionCountDetails;
  me: boolean;
  me_burst: boolean;
  emoji: Emoji;
  burst_colors: string[];
}
export interface ReactionCountDetails {
  burst: number /* int */;
  normal: number /* int */;
}
export interface ChannelMention {
  id: Snowflake;
  guild_id: Snowflake;
  type: ChannelType;
  name: string;
}
export interface Attachment {
  id: Snowflake;
  filename: string;
  description?: Optional<string>;
  content_type?: Optional<string>;
  size: number /* int */;
  url: string;
  proxy_url: string;
  height?: Optional<number /* int */>;
  width?: Optional<number /* int */>;
  ephemeral?: Optional<boolean>;
  duration_secs?: Optional<number /* float64 */>;
  waveform?: Optional<string>;
  flags?: Optional<AttachmentFlags>;
}
export type AttachmentFlags = number /* int */;
export const AttachmentFlagsIsRemix: AttachmentFlags = 1 << 2;
export interface MessageInteraction {
  id: Snowflake;
  type: InteractionType;
  name: string;
  user: User;
  member?: Optional<Member>;
}
export interface MessageStickerItem {
  id: Snowflake;
  name: string;
  format_type: StickerFormatType;
}
export interface RoleSubscriptionData {
  role_subscription_listing_id: Snowflake;
  tier_name: string;
  total_months_subscribed: number /* int */;
  is_renewal: boolean;
}
export interface Embed {
  title?: Optional<string>;
  type?: Optional<EmbedType>;
  description?: Optional<string>;
  url?: Optional<string>;
  timestamp?: Optional<string /* RFC3339 */>;
  color?: Optional<number /* int */>;
  footer?: Optional<EmbedFooter>;
  image?: Optional<EmbedImage>;
  thumbnail?: Optional<EmbedThumbnail>;
  video?: Optional<EmbedVideo>;
  provider?: Optional<EmbedProvider>;
  author?: Optional<EmbedAuthor>;
  fields?: EmbedField[];
}
export type EmbedType = string;
export const EmbedTypeRich: EmbedType = "rich";
export const EmbedTypeImage: EmbedType = "image";
export const EmbedTypeVideo: EmbedType = "video";
export const EmbedTypeGifv: EmbedType = "gifv";
export const EmbedTypeArticle: EmbedType = "article";
export const EmbedTypeLink: EmbedType = "link";
export interface EmbedThumbnail {
  url: string;
  proxy_url?: Optional<string>;
  height?: Optional<number /* int */>;
  width?: Optional<number /* int */>;
}
export interface EmbedVideo {
  url?: Optional<string>;
  proxy_url?: Optional<string>;
  height?: Optional<number /* int */>;
  width?: Optional<number /* int */>;
}
export interface EmbedImage {
  url: string;
  proxy_url?: Optional<string>;
  height?: Optional<number /* int */>;
  width?: Optional<number /* int */>;
}
export interface EmbedProvider {
  name?: Optional<string>;
  url?: Optional<string>;
}
export interface EmbedAuthor {
  name: string;
  url?: Optional<string>;
  icon_url?: Optional<string>;
  proxy_icon_url?: Optional<string>;
}
export interface EmbedFooter {
  text: string;
  icon_url?: Optional<string>;
  proxy_icon_url?: Optional<string>;
}
export interface EmbedField {
  name: string;
  value: string;
  inline?: Optional<boolean>;
}
export interface AllowedMentions {
  parse: AllowedMentionType[];
  roles: Snowflake[];
  users: Snowflake[];
  replied_user: boolean;
}
export type AllowedMentionType = string;
export const AllowedMentionTypeRoleMentions: AllowedMentionType = "roles";
export const AllowedMentionTypeUserMentions: AllowedMentionType = "users";
export const AllowedMentionTypeEveryoneMention: AllowedMentionType = "everyone";
export type MessageCreateEvent = Message;
export type MessageUpdateEvent = Message;
export interface MessageDeleteEvent {
  id: Snowflake;
  channel_id: Snowflake;
  guild_id?: Optional<Snowflake>;
}
export interface MessageDeleteBulkEvent {
  ids: Snowflake[];
  channel_id: Snowflake;
  guild_id?: Optional<Snowflake>;
}
export interface MessageReactionAddEvent {
  user_id: Snowflake;
  channel_id: Snowflake;
  message_id: Snowflake;
  guild_id?: Optional<Snowflake>;
  member?: Optional<Member>;
  emoji: Emoji;
  message_author_id?: Optional<Snowflake>;
}
export interface MessageReactionRemoveEvent {
  user_id: Snowflake;
  channel_id: Snowflake;
  message_id: Snowflake;
  guild_id?: Optional<Snowflake>;
  emoji: Emoji;
}
export interface MessageReactionRemoveAllEvent {
  channel_id: Snowflake;
  message_id: Snowflake;
  guild_id?: Optional<Snowflake>;
}
export interface MessageReactionRemoveEmojiEvent {
  channel_id: Snowflake;
  message_id: Snowflake;
  guild_id?: Optional<Snowflake>;
  emoji: Emoji;
}
export interface MessageCreateParams {
  content?: Optional<string>;
  nonce?: Optional<string>;
  tts?: Optional<boolean>;
  embeds?: Embed[];
  allowed_mentions?: Optional<AllowedMentions>;
  message_reference?: Optional<MessageReference>;
  components?: MessageComponent[];
  sticker_ids?: Snowflake[];
  attachments?: Attachment[];
  files?: File[];
  flags?: Optional<MessageFlags>;
}
export interface MessageEditParams {
  content?: Optional<string>;
  embeds?: Embed[];
  allowed_mentions?: Optional<AllowedMentions>;
  message_reference?: Optional<MessageReference>;
  components?: MessageComponent[];
  sticker_ids?: Snowflake[];
  attachments?: Attachment[];
  files?: File[];
  flags?: Optional<MessageFlags>;
}
export interface File {
  filename: string;
  content_type: string;
  data: string;
}
export interface ChannelMessageListRequest {
  channel_id: Snowflake;
  around?: Optional<Snowflake>;
  before?: Optional<Snowflake>;
  after?: Optional<Snowflake>;
  limit?: Optional<number /* int */>;
}
export type ChannelMessageListResponse = Message[];
export interface MessageGetRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export type MessageGetResponse = Message;
export interface MessageCreateRequest {
  channel_id: Snowflake;
  MessageCreateParams: MessageCreateParams;
}
export type MessageCreateResponse = Message;
export interface MessageCrosspostRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export type MessageCrosspostResponse = Message;
export interface MessageEditRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  MessageEditParams: MessageEditParams;
}
export type MessageEditResponse = Message;
export interface MessageDeleteRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export interface MessageDeleteResponse {
}
export interface MessageBulkDeleteRequest {
  channel_id: Snowflake;
  messages: Snowflake[];
}
export interface MessageBulkDeleteResponse {
}
export interface MessageReactionListRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  emoji?: Optional<string>;
  after?: Optional<Snowflake>;
  limit?: Optional<number /* int */>;
}
export type MessageReactionListResponse = Reaction[];
export interface MessageReactionCreateRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  emoji: string;
}
export interface MessageReactionCreateResponse {
}
export interface MessageReactionDeleteOwnRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  emoji: string;
}
export interface MessageReactionDeleteOwnResponse {
}
export interface MessageReactionDeleteRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  emoji: string;
  user_id: Snowflake;
}
export interface MessageReactionDeleteResponse {
}
export interface MessageReactionDeleteAllRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export interface MessageReactionDeleteAllResponse {
}
export interface MessageReactionDeleteEmojiRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
  emoji: string;
}
export interface MessageReactionDeleteEmojiResponse {
}
export interface ChannelPinnedMessageListRequest {
  channel_id: Snowflake;
}
export type ChannelPinnedMessageListResponse = Message[];
export interface MessagePinRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export interface MessagePinResponse {
}
export interface MessageUnpinRequest {
  channel_id: Snowflake;
  message_id: Snowflake;
}
export interface MessageUnpinResponse {
}

//////////
// source: permissions.go

export type Permissions = string;
export type Permission = number /* uint64 */;
export const PermissionCreateInstantInvite: Permission = 0x00000001; // TODO

//////////
// source: role.go

export interface Role {
  id: Snowflake;
  name: string;
  color: number /* int */;
  hoist: boolean;
  icon?: Optional<Nullable<string>>;
  unicode_emoji?: Optional<Nullable<string>>;
  position: number /* int */;
  permissions: Permissions;
  managed: boolean;
  mentionable: boolean;
  tags?: Optional<RoleTags>;
  flags: RoleFlags;
}
export interface RoleTags {
  bot_id?: Optional<Snowflake>;
  integration_id?: Optional<Snowflake>;
  premium_subscriber?: Optional<Nullable<{
  }>>;
  subscription_listing_id: Optional<Snowflake>;
  available_for_purchase?: Optional<Nullable<{
  }>>;
  guild_connections?: Optional<Nullable<{
  }>>;
}
export type RoleFlags = number /* int */;
export const RoleFlagsInPrompt: RoleFlags = 1 << 0;
export interface RoleCreateEvent {
  role: Role;
  guild_id: Snowflake;
}
export interface RoleUpdateEvent {
  role: Role;
  guild_id: Snowflake;
}
export interface RoleDeleteEvent {
  role_id: Snowflake;
  guild_id: Snowflake;
}
export interface GuildRoleListRequest {
  guild_id: Snowflake;
}
export type GuildRoleListResponse = Role[];
export interface RoleCreateRequest {
  guild_id: Snowflake;
  name?: Optional<string>;
  permissions?: Optional<Permissions>;
  color?: Optional<number /* int */>;
  hoist?: Optional<boolean>;
  icon?: Optional<string>;
  unicode_emoji?: Optional<string>;
  mentionable?: Optional<boolean>;
}
export type RoleCreateResponse = Role;
export interface RoleModifyRequest {
  guild_id: Snowflake;
  role_id: Snowflake;
  name?: Optional<string>;
  permissions?: Optional<Permissions>;
  color?: Optional<number /* int */>;
  icon?: Optional<string>;
  unicode_emoji?: Optional<string>;
  mentionable?: Optional<boolean>;
  hoist?: Optional<boolean>;
}
export type RoleModifyResponse = Role;
export interface RoleDeleteRequest {
  guild_id: Snowflake;
  role_id: Snowflake;
}
export interface RoleDeleteResponse {
}
export type RolePositionsModifyRequest = RolePositionsModifyEntry[];
export interface RolePositionsModifyEntry {
  id: Snowflake;
  position?: Optional<number /* int */>;
}
export interface RolePositionsModifyResponse {
}

//////////
// source: scheduled_event.go

export interface ScheduledEvent {
  id: Snowflake;
  guild_id: Snowflake;
  channel_id: Nullable<Snowflake>;
  creator_id?: Optional<Nullable<Snowflake>>;
  name: string;
  description?: Optional<string>;
  scheduled_start_time: string /* RFC3339 */;
  scheduled_end_time: Nullable<string /* RFC3339 */>;
  privacy_level: PrivacyLevel;
  status: ScheduledEventStatus;
  entity_type: ScheduledEventEntityType;
  entity_id: Nullable<Snowflake>;
  entity_metadata: Nullable<ScheduledEventEntityMetadata>;
  creator?: Optional<User>;
  user_count?: Optional<number /* int */>;
  image?: Optional<Nullable<string>>;
}
export type ScheduledEventStatus = number /* int */;
export const ScheduledEventStatusScheduled: ScheduledEventStatus = 1;
export const ScheduledEventStatusActive: ScheduledEventStatus = 2;
export const ScheduledEventStatusCompleted: ScheduledEventStatus = 3;
export const ScheduledEventStatusCanceled: ScheduledEventStatus = 4;
export type ScheduledEventEntityType = number /* int */;
export const ScheduledEventEntityTypeStageInstance: ScheduledEventEntityType = 1;
export const ScheduledEventEntityTypeVoice: ScheduledEventEntityType = 2;
export const ScheduledEventEntityTypeExternal: ScheduledEventEntityType = 3;
export interface ScheduledEventEntityMetadata {
  location?: Optional<string>;
}
export interface ScheduledEventUser {
  guild_scheduled_event_id: Snowflake;
  user: User;
  member?: Optional<Member>;
}
export type ScheduledEventCreateEvent = ScheduledEvent;
export type ScheduledEventUpdateEvent = ScheduledEvent;
export type ScheduledEventDeleteEvent = ScheduledEvent;
export interface ScheduledEventUserAddEvent {
  guild_scheduled_event_id: Snowflake;
  user_id: Snowflake;
  guild_id: Snowflake;
}
export interface ScheduledEventUserRemoveEvent {
  guild_scheduled_event_id: Snowflake;
  user_id: Snowflake;
  guild_id: Snowflake;
}
export interface GuildScheduledEventListRequest {
  guild_id: Snowflake;
  with_user_count?: Optional<boolean>;
}
export type GuildScheduledEventListResponse = ScheduledEvent[];
export interface ScheduledEventCreateRequest {
  guild_id: Snowflake;
  channel_id?: Optional<Snowflake>;
  name: string;
  entity_metadata?: Optional<ScheduledEventEntityMetadata>;
  privacy_level?: Optional<PrivacyLevel>;
  scheduled_start_time: string /* RFC3339 */;
  scheduled_end_time?: Optional<string /* RFC3339 */>;
  description?: Optional<string>;
  entity_type: ScheduledEventEntityType;
  image?: Optional<Nullable<string>>;
}
export type ScheduledEventCreateResponse = ScheduledEvent;
export interface ScheduledEventModifyRequest {
  guild_id: Snowflake;
  guild_scheduled_event_id: Snowflake;
  channel_id?: Optional<Snowflake>;
  name?: Optional<string>;
  entity_metadata?: Optional<ScheduledEventEntityMetadata>;
  privacy_level?: Optional<PrivacyLevel>;
  scheduled_start_time?: Optional<string /* RFC3339 */>;
  scheduled_end_time?: Optional<string /* RFC3339 */>;
  description?: Optional<string>;
  image?: Optional<Nullable<string>>;
  status?: Optional<ScheduledEventStatus>;
  entity_type?: Optional<ScheduledEventEntityType>;
}
export type ScheduledEventModifyResponse = ScheduledEvent;
export interface ScheduledEventDeleteRequest {
  guild_id: Snowflake;
  guild_scheduled_event_id: Snowflake;
}
export interface ScheduledEventDeleteResponse {
}
export interface ScheduledEventGetRequest {
  guild_id: Snowflake;
  guild_scheduled_event_id: Snowflake;
}
export type ScheduledEventGetResponse = ScheduledEvent;
export interface ScheduledEventUserListRequest {
  guild_id: Snowflake;
  guild_scheduled_event_id: Snowflake;
  limit?: Optional<number /* int */>;
  with_member?: Optional<boolean>;
  before?: Optional<Snowflake>;
  after?: Optional<Snowflake>;
}
export type ScheduledEventUserListResponse = ScheduledEventUser[];

//////////
// source: snowflake.go

export type Snowflake = string;

//////////
// source: stage.go

export interface StageInstance {
  id: Snowflake;
  guild_id: Snowflake;
  channel_id: Snowflake;
  topic: string;
  privacy_level: PrivacyLevel;
  discoverable_disabled: boolean;
  guild_scheduled_event_id: Snowflake;
}
export type PrivacyLevel = number /* int */;
export const PrivacyLevelPublic: PrivacyLevel = 1;
export const PrivacyLevelGuildOnly: PrivacyLevel = 2;
export type StageInstanceCreateEvent = StageInstance;
export type StageInstanceUpdateEvent = StageInstance;
export type StageInstanceDeleteEvent = StageInstance;
export interface StageInstanceCreateRequest {
  channel_id: Snowflake;
  topic: string;
  privacy_level?: Optional<PrivacyLevel>;
  send_start_notification?: Optional<boolean>;
  guild_scheduled_event_id?: Optional<Snowflake>;
}
export type StageInstanceCreateResponse = StageInstance;
export interface StageInstanceModifyRequest {
  channel_id: Snowflake;
  topic?: Optional<string>;
  privacy_level?: Optional<PrivacyLevel>;
}
export type StageInstanceModifyResponse = StageInstance;
export interface StageInstanceDeleteRequest {
  channel_id: Snowflake;
}
export interface StageInstanceDeleteResponse {
}
export interface StageInstanceGetRequest {
  channel_id: Snowflake;
}
export type StageInstanceGetResponse = StageInstance;

//////////
// source: sticker.go

export interface Sticker {
  id: Snowflake;
  pack_id?: Optional<string>;
  name: string;
  description?: Optional<string>;
  tags: string;
  asset?: Optional<string>;
  type: StickerType;
  format_type: StickerFormatType;
  available?: Optional<boolean>;
  guild_id?: Optional<Snowflake>;
  user?: Optional<User>;
  sort_value?: Optional<number /* int */>;
}
export type StickerType = number /* int */;
export const StickerTypeStandard: StickerType = 1;
export const StickerTypeGuild: StickerType = 2;
export type StickerFormatType = number /* int */;
export const StickerFormatTypePNG: StickerFormatType = 1;
export const StickerFormatTypeAPNG: StickerFormatType = 2;
export const StickerFormatTypeLOTTIE: StickerFormatType = 3;
export const StickerFormatTypeGIF: StickerFormatType = 4;
export interface GuildStickersUpdateEvent {
  guild_id: Snowflake;
  stickers: Sticker[];
}
export interface GuildStickerListRequest {
  guild_id: Snowflake;
}
export type GuildStickerListResponse = Sticker[];
export interface StickerGetRequest {
  guild_id: Snowflake;
  sticker_id: Snowflake;
}
export type StickerGetResponse = Sticker;
export interface StickerCreateRequest {
  guild_id: Snowflake;
  name: string;
  description: string;
  tags: string;
  file: string;
}
export type StickerCreateResponse = Sticker;
export interface StickerModifyRequest {
  guild_id: Snowflake;
  sticker_id: Snowflake;
  name: string;
  description: string;
  tags: string;
}
export type StickerModifyResponse = Sticker;
export interface StickerDeleteRequest {
  guild_id: Snowflake;
  sticker_id: Snowflake;
}
export interface StickerDeleteResponse {
}

//////////
// source: user.go

export interface User {
  id: Snowflake;
  username: string;
  discriminator: string;
  global_name: Nullable<string>;
  avatar: Nullable<string>;
  bot?: Optional<boolean>;
  system?: Optional<boolean>;
  mfa_enabled?: Optional<boolean>;
  banner?: Optional<Nullable<string>>;
  accent_color?: Optional<Nullable<number /* int */>>;
  locale?: Optional<string>;
  verified?: Optional<boolean>;
  email?: Optional<Nullable<string>>;
  flags?: Optional<number /* int */>;
  premium_type?: Optional<number /* int */>;
  public_flags?: Optional<number /* int */>;
  avatar_decoration?: Optional<Nullable<string>>;
}
export type UserFlags = number /* int */;
export const UserFlagsStaff: UserFlags = 1 << 0;
export const UserFlagsPartner: UserFlags = 1 << 1;
export const UserFlagsHypeSquad: UserFlags = 1 << 2;
export const UserFlagsBugHunterLevel1: UserFlags = 1 << 3;
export const UserFlagsHypeSquadOnlineHouse1: UserFlags = 1 << 6;
export const UserFlagsHypeSquadOnlineHouse2: UserFlags = 1 << 7;
export const UserFlagsHypeSquadOnlineHouse3: UserFlags = 1 << 8;
export const UserFlagsPremiumEarlySupporter: UserFlags = 1 << 9;
export const UserFlagsTeamPseudoUser: UserFlags = 1 << 10;
export const UserFlagsBugHunterLevel2: UserFlags = 1 << 14;
export const UserFlagsVerifiedBot: UserFlags = 1 << 16;
export const UserFlagsVerifiedDeveloper: UserFlags = 1 << 17;
export const UserFlagsCertifiedModerator: UserFlags = 1 << 18;
export const UserFlagsBotHTTPInteractions: UserFlags = 1 << 19;
export const UserFlagsActiveDeveloper: UserFlags = 1 << 22;
export type PremiumType = number /* int */;
export const PremiumTypeNone: PremiumType = 0;
export const PremiumTypeNitroClassic: PremiumType = 1;
export const PremiumTypeNitro: PremiumType = 2;
export const PremiumTypeNitroBasic: PremiumType = 3;
export interface UserGetRequest {
  user_id: Snowflake;
}
export type UserGetResponse = User;

//////////
// source: webhook.go

export interface Webhook {
  id: Snowflake;
  type: WebhookType;
  guild_id: Nullable<Snowflake>;
  channel_id: Nullable<Snowflake>;
  user?: Optional<User>;
  name: Nullable<string>;
  avatar: Nullable<string>;
  token?: Optional<string>;
  application_id: Nullable<Snowflake>;
  source_guild?: Optional<Guild>;
  source_channel?: Optional<Channel>;
  url?: Optional<string>;
}
export type WebhookType = number /* int */;
export const WebhookTypeIncoming: WebhookType = 1;
export const WebhookTypeChannelFollower: WebhookType = 2;
export const WebhookTypeApplication: WebhookType = 3;
export interface WebhooksUpdateEvent {
  guild_id: Snowflake;
  channel_id: Snowflake;
}
export interface WebhookCreateRequest {
  channel_id: Snowflake;
  name: string;
  avatar?: Optional<Nullable<string>>;
}
export type WebhookCreateResponse = Webhook;
export interface GuildWebhookListRequest {
  guild_id: Snowflake;
}
export type GuildWebhookListResponse = Webhook[];
export interface ChannelWebhookListRequest {
  channel_id: Snowflake;
}
export type ChannelWebhookListResponse = Webhook[];
export interface WebhookGetRequest {
  webhook_id: Snowflake;
}
export type WebhookGetResponse = Webhook;
export interface WebhookGetWithTokenRequest {
  webhook_id: Snowflake;
  webhook_token: string;
}
export type WebhookGetWithTokenResponse = Webhook;
export interface WebhookModifyRequest {
  webhook_id: Snowflake;
  name?: Optional<string>;
  avatar?: Optional<Nullable<string>>;
  channel_id?: Optional<Snowflake>;
}
export type WebhookModifyResponse = Webhook;
export interface WebhookModifyWithTokenRequest {
  webhook_id: Snowflake;
  webhook_token: string;
  name?: Optional<string>;
  avatar?: Optional<Nullable<string>>;
  channel_id?: Optional<Snowflake>;
}
export type WebhookModifyWithTokenResponse = Webhook;
export interface WebhookDeleteRequest {
  webhook_id: Snowflake;
}
export interface WebhookDeleteResponse {
}
export interface WebhookDeleteWithTokenRequest {
  webhook_id: Snowflake;
  webhook_token: string;
}
export interface WebhookDeleteWithTokenResponse {
}
export interface WebhookExecuteRequest {
  webhook_id: Snowflake;
  webhook_token: string;
  wait?: Optional<boolean>;
  thread_id?: Optional<Snowflake>;
  MessageCreateParams: MessageCreateParams;
}
export type WebhookExecuteResponse = Optional<Message>;
export interface WebhookMessageGetRequest {
  webhook_id: Snowflake;
  webhook_token: string;
  message_id: Snowflake;
}
export type WebhookMessageGetResponse = Message;
export interface WebhookMessageEditRequest {
  webhook_id: Snowflake;
  webhook_token: string;
  message_id: Snowflake;
  MessageEditParams: MessageEditParams;
}
export type WebhookMessageEditResponse = Message;
export interface WebhookMessageDeleteRequest {
  webhook_id: Snowflake;
  webhook_token: string;
  message_id: Snowflake;
}
export type WebhookMessageDeleteResponse = Message;
