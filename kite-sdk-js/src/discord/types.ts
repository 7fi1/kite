// Code generated by tygo. DO NOT EDIT.
type Nullable<T> = T | null

//////////
// source: application.go

export interface Application {
}

//////////
// source: ban.go

export interface Ban {
  reason: string;
  user: User;
}
export interface GuildBanAddEvent {
  guild_id: string;
  user: User;
}
export interface GuildBanRemoveEvent {
  guild_id: string;
  user: User;
}
export interface BanListCall {
  limit: number /* int */;
  before: string;
  after: string;
}
export type BanListResponse = Ban[];
export interface BanGetCall {
  user_id: string;
}
export type BanGetResponse = Ban;
export interface BanCreateCall {
  user_id: string;
  delete_message_seconds?: number /* int */;
}
export interface BanCreateResponse {
}
export interface BanRemoveCall {
  user_id: string;
}
export interface BanRemoveResponse {
}

//////////
// source: channel.go

/**
 * Channel represents a Discord channel.
 * https://discord.com/developers/docs/resources/channel#channel-object-channel-structure
 */
export interface Channel {
  id: string;
  type: ChannelType;
  guild_id?: string;
  position?: number /* int */;
  permission_overwrites?: ChannelPermissionOverwrite[];
  name?: string;
  topic?: string;
  nsfw?: boolean;
  last_message_id?: string;
  bitrate?: number /* int */;
  user_limit?: number /* int */;
  rate_limit_per_user?: number /* int */;
  parent_id?: string;
  last_pin_timestamp?: string /* RFC3339 */;
  rtc_region?: string;
  video_quality_mode?: ChannelVideoQualityMode;
  thread_metadata?: ChannelThreadMetadata;
  member?: ChannelThreadMember;
  default_auto_archive_duration?: number /* int */;
  permissions?: string;
  flags?: number /* int */;
  available_tags?: ChannelTag[];
  applied_tags?: string[];
  default_reaction_emoji?: ChannelDefaultReactionEmoji;
  default_thread_rate_limit_per_user?: number /* int */;
  default_sort_order?: ChannelDefaultSortOrder;
  default_forum_layout?: ChannelDefaultForumLayout;
}
export type ChannelType = number /* int */;
export const ChannelTypeGuildText: ChannelType = 0;
export const ChannelTypeDM: ChannelType = 1;
export const ChannelTypeGuildVoice: ChannelType = 2;
export const ChannelTypeGroupDM: ChannelType = 3;
export const ChannelTypeGuildCategory: ChannelType = 4;
export const ChannelTypeGuildAnnouncement: ChannelType = 5;
export const ChannelTypeAnnouncementThread: ChannelType = 10;
export const ChannelTypePublicThread: ChannelType = 11;
export const ChannelTypePrivateThread: ChannelType = 12;
export const ChannelTypeStageVoice: ChannelType = 13;
export const ChannelTypeGuildDirectory: ChannelType = 14;
export const ChannelTypeGuildForum: ChannelType = 15;
export const ChannelTypeMedia: ChannelType = 16;
export interface ChannelPermissionOverwrite {
  id: string;
  type: ChannelpermissionoverwriteType;
  allow: string;
  deny: string;
}
export type ChannelpermissionoverwriteType = number /* int */;
export const ChannelpermissionoverwriteTypeRole: ChannelpermissionoverwriteType = 0;
export const ChannelpermissionoverwriteTypeMember: ChannelpermissionoverwriteType = 1;
export type ChannelVideoQualityMode = number /* int */;
export const ChannelVideoQualityModeAuto: ChannelVideoQualityMode = 1;
export const ChannelVideoQualityModeFull: ChannelVideoQualityMode = 2;
export interface ChannelThreadMetadata {
  archived: boolean;
  auto_archive_duration: number /* int */;
  archive_timestamp: string /* RFC3339 */;
  locked: boolean;
  invitable?: boolean;
  create_timestamp?: string /* RFC3339 */;
}
export interface ChannelThreadMember {
  id: string;
  user_id: string;
  join_timestamp: string /* RFC3339 */;
  flags: number /* int */;
  member?: Member;
}
export interface ChannelTag {
  id: string;
  name: string;
  moderated: boolean;
  emoji_id?: string;
  emoji_name?: string;
}
export interface ChannelDefaultReactionEmoji {
  emoji_id?: string;
  emoji_name?: string;
}
export type ChannelDefaultSortOrder = number /* int */;
export const ChannelDefaultSortOrderLatestActivity: ChannelDefaultSortOrder = 0;
export const ChannelDefaultSortOrderCreationDate: ChannelDefaultSortOrder = 1;
export type ChannelDefaultForumLayout = number /* int */;
export const ChannelDefaultForumLayoutNotSet: ChannelDefaultForumLayout = 0;
export const ChannelDefaultForumLayoutListView: ChannelDefaultForumLayout = 1;
export const ChannelDefaultForumLayoutGalleryView: ChannelDefaultForumLayout = 2;
export type ChannelCreateEvent = Channel;
export type ChannelUpdateEvent = Channel;
export type ChannelDeleteEvent = Channel;
export interface ChannelPinsUpdateEvent {
  guild_id?: string;
  channel_id: string;
  last_pin_timestamp?: string /* RFC3339 */;
}
export type ThreadCreateEvent = Channel;
export type ThreadUpdateEvent = Channel;
export interface ThreadDeleteEvent {
  id: string;
  guild_id: string;
  parent_id: string;
  type: ChannelType;
}
export interface ThreadListSyncEvent {
  guild_id: string;
  channel_ids: string[];
  threads: Channel[];
  members: ChannelThreadMember[];
}
export interface ThreadMemberUpdateEvent {
  ChannelThreadMember: ChannelThreadMember;
  guild_id: string;
}
export interface ThreadMembersUpdateEvent {
  id: string;
  guild_id: string;
  member_count: number /* int */;
  added_members: ChannelThreadMember[];
  removed_member_ids: string[];
}
export interface ChannelGetCall {
  id: string;
}
export type ChannelGetResponse = Channel;
export interface ChannelListCall {
}
export type ChannelListResponse = Channel[];
export interface ChannelCreateCall {
  name?: string;
  type?: ChannelType;
  topic?: string;
  bitrate?: number /* int */;
  user_limit?: number /* int */;
  rate_limit_per_user?: number /* int */;
  position?: number /* int */;
  permission_overwrites?: ChannelPermissionOverwrite[];
  parent_id?: string;
  nsfw?: boolean;
  rtc_region?: string;
  video_quality_mode?: ChannelVideoQualityMode;
  default_auto_archive_duration?: number /* int */;
  default_reaction_emoji?: ChannelDefaultReactionEmoji;
  available_tags?: ChannelTag[];
  default_sort_order?: ChannelDefaultSortOrder;
  default_forum_layout?: ChannelDefaultForumLayout;
  default_thread_rate_limit_per_user?: number /* int */;
}
export type ChannelCreateResponse = Channel;
export interface ChannelUpdateCall {
  id: string;
  name?: Nullable<string>;
  type?: Nullable<ChannelType>;
  position?: Nullable<number /* int */>;
  topic?: Nullable<string>;
  nsfw?: Nullable<boolean>;
  rate_limit_per_user?: Nullable<number /* int */>;
  bitrate?: Nullable<number /* int */>;
  user_limit?: Nullable<number /* int */>;
  permission_overwrites?: Nullable<ChannelPermissionOverwrite[]>;
  parent_id?: Nullable<string>;
  rtc_region?: Nullable<string>;
  video_quality_mode?: Nullable<ChannelVideoQualityMode>;
  default_auto_archive_duration?: Nullable<number /* int */>;
  flags?: Nullable<number /* int */>;
  available_tags?: Nullable<ChannelTag[]>;
  default_reaction_emoji?: Nullable<ChannelDefaultReactionEmoji>;
  default_thread_rate_limit_per_user?: Nullable<number /* int */>;
  default_sort_order?: Nullable<ChannelDefaultSortOrder>;
  default_forum_layout?: Nullable<ChannelDefaultForumLayout>;
}
export type ChannelUpdateResponse = Channel;
export type ChannelUpdatePositionsCall = ChannelUpdatePositionsEntry[];
export interface ChannelUpdatePositionsEntry {
  id: string;
  position: number /* int */;
  lock_permissions: boolean;
  parent_id: string;
}
export interface ChannelUpdatePositionsResponse {
}
export interface ChannelDeleteCall {
  id: string;
}
export type ChannelDeleteResponse = Channel;
export interface ChannelUpdatePermissionsCall {
  channel_id: string;
  overwrite_id: string;
  allow: string;
  deny: string;
  type: ChannelpermissionoverwriteType;
}
export interface ChannelUpdatePermissionsResponse {
}
export interface ChannelDeletePermissionsCall {
  channel_id: string;
  overwrite_id: string;
}
export interface ChannelDeletePermissionsResponse {
}
export interface ThreadStartFromMessageCall {
  channel_id: string;
  message_id: string;
  name: string;
  auto_archive_duration: number /* int */;
  rate_limit_per_user: number /* int */;
}
export type ThreadStartFromMessageResponse = Channel;
export interface ThreadStartCall {
  channel_id: string;
  name: string;
  type: ChannelType;
  auto_archive_duration: number /* int */;
  invitable: boolean;
  rate_limit_per_user: number /* int */;
}
export type ThreadStartResponse = Channel;
export interface ThreadStartInForumCall {
  channel_id: string;
  name: string;
  auto_archive_duration: number /* int */;
  rate_limit_per_user: number /* int */;
  message: Message;
  applied_tags: string[];
}
export type ThreadStartInForumResponse = Channel;
export interface ThreadJoinCall {
  channel_id: string;
}
export interface ThreadJoinResponse {
}
export interface ThreadMemberAddCall {
  channel_id: string;
  user_id: string;
}
export interface ThreadMemberAddResponse {
}
export interface ThreadLeaveCall {
  channel_id: string;
}
export interface ThreadLeaveResponse {
}
export interface ThreadMemberRemoveCall {
  channel_id: string;
  user_id: string;
}
export interface ThreadMemberRemoveResponse {
}
export interface ThreadMemberGetCall {
  channel_id: string;
  user_id: string;
  with_member: boolean;
}
export type ThreadMemberGetResponse = ChannelThreadMember;
export interface ThreadMemberListCall {
  channel_id: string;
  with_member: boolean;
  after: string;
  limit: number /* int */;
}
export type ThreadMemberListResponse = ChannelThreadMember[];
export interface ThreadListPublicArchivedCall {
  channel_id: string;
  before: string;
  limit: number /* int */;
}
export interface ThreadListPublicArchivedResponse {
  threads: Channel[];
  members: ChannelThreadMember[];
  has_more: boolean;
}
export interface ThreadListPrivateArchivedCall {
  channel_id: string;
  before: string;
  limit: number /* int */;
}
export interface ThreadListPrivateArchivedResponse {
  threads: Channel[];
  members: ChannelThreadMember[];
  has_more: boolean;
}
export interface ThreadListJoinedPrivateArchivedCall {
  channel_id: string;
  before: string;
  limit: number /* int */;
}
export interface ThreadListJoinedPrivateArchivedResponse {
  threads: Channel[];
  members: ChannelThreadMember[];
  has_more: boolean;
}
export interface ThreadListActiveCall {
}
export interface ThreadListActiveResponse {
  threads: Channel[];
  members: ChannelThreadMember[];
}

//////////
// source: emoji.go

export interface Emoji {
}
export interface GuildEmojisUpdateEvent {
  emojis: Emoji[];
}
export interface EmojiListCall {
  guild_id: string;
}
export type EmojiListResponse = Emoji[];
export interface EmojiGetCall {
  emoji_id: string;
}
export type EmojiGetResponse = Emoji;
export interface EmojiCreateCall {
  name: string;
  image: string;
  roles: string[];
}
export type EmojiCreateResponse = Emoji;
export interface EmojiUpdateCall {
  emoji_id: string;
  name: string;
  roles: string[];
}
export type EmojiUpdateResponse = Emoji;
export interface EmojiDeleteCall {
  emoji_id: string;
}
export interface EmojiDeleteResponse {
}

//////////
// source: guild.go

export interface Guild {
  id: string;
  name: string;
  icon?: string;
  splash?: string;
  discovery_splash?: string;
  owner_id: string;
  afk_channel_id?: string;
  afk_timeout: number /* int */;
  widget_enabled?: boolean;
  widget_channel_id?: string;
  verification_level: GuildVerificationLevel;
  default_message_notifications: GuildDefaultNotificationLevel;
  explicit_content_filter: GuildExplicitContentFilterLevel;
  roles?: Role[];
  /**
   * Emojis                      []Emoji                         `json:"emojis,omitempty"`
   */
  features?: string[];
  mfa_level: GuildMFALevel;
  system_channel_id?: string;
  system_channel_flags: number /* int */;
  rules_channel_id?: string;
  max_presences?: number /* int */;
  max_members?: number /* int */;
  vanity_url_code?: string;
  description?: string;
  banner?: string;
  premium_tier: GuildPremiumTier;
  premium_subscription_count?: number /* int */;
  preferred_locale: string;
  public_updates_channel_id?: string;
  max_video_channel_users?: number /* int */;
  max_stage_video_channel_users?: number /* int */;
  approximate_member_count?: number /* int */;
  approximate_presence_count?: number /* int */;
  /**
   * WelcomeScreen             *GuildWelcomeScreen     `json:"welcome_screen,omitempty"`
   */
  nsfw_level: GuildNSFWLevel;
  /**
   * Stickers                  []Sticker               `json:"stickers,omitempty"`
   */
  premium_progress_bar_enabled?: boolean;
  safety_alerts_channel_id?: string;
}
export interface UnavailableGuild {
  id: string;
  unavailable: boolean;
}
export type GuildVerificationLevel = number /* int */;
export const GuildVerificationLevelNone: GuildVerificationLevel = 0;
export const GuildVerificationLevelLow: GuildVerificationLevel = 1;
export const GuildVerificationLevelMedium: GuildVerificationLevel = 2;
export const GuildVerificationLevelHigh: GuildVerificationLevel = 3;
export const GuildVerificationLevelVeryHigh: GuildVerificationLevel = 4;
export type GuildDefaultNotificationLevel = number /* int */;
export const GuildDefaultNotificationLevelAllMessages: GuildDefaultNotificationLevel = 0;
export const GuildDefaultNotificationLevelOnlyMentions: GuildDefaultNotificationLevel = 1;
export type GuildExplicitContentFilterLevel = number /* int */;
export const GuildExplicitContentFilterLevelDisabled: GuildExplicitContentFilterLevel = 0;
export const GuildExplicitContentFilterLevelMembersWithoutRoles: GuildExplicitContentFilterLevel = 1;
export const GuildExplicitContentFilterLevelAllMembers: GuildExplicitContentFilterLevel = 2;
export type GuildMFALevel = number /* int */;
export const GuildMFALevelNone: GuildMFALevel = 0;
export const GuildMFALevelElevated: GuildMFALevel = 1;
export type GuildPremiumTier = number /* int */;
export const GuildPremiumTierNone: GuildPremiumTier = 0;
export const GuildPremiumTier1: GuildPremiumTier = 1;
export const GuildPremiumTier2: GuildPremiumTier = 2;
export const GuildPremiumTier3: GuildPremiumTier = 3;
export type GuildNSFWLevel = number /* int */;
export const GuildNSFWLevelDefault: GuildNSFWLevel = 0;
export const GuildNSFWLevelExplicit: GuildNSFWLevel = 1;
export const GuildNSFWLevelSafe: GuildNSFWLevel = 2;
export const GuildNSFWLevelAgeRestricted: GuildNSFWLevel = 3;
export type GuildCreateEvent = Guild;
export type GuildUpdateEvent = Guild;
export type GuildDeleteEvent = UnavailableGuild;
export interface GuildGetCall {
}
export type GuildGetResponse = Guild;
export interface GuildUpdateCall {
  name: Nullable<string>;
  verification_level: Nullable<GuildVerificationLevel>;
  default_message_notifications: Nullable<GuildDefaultNotificationLevel>;
  explicit_content_filter: Nullable<GuildExplicitContentFilterLevel>;
  afk_channel_id: Nullable<string>;
  afk_timeout: Nullable<number /* int */>;
  icon: Nullable<string>;
  splash: Nullable<string>;
  discovery_splash: Nullable<string>;
  banner: Nullable<string>;
  system_channel_id: Nullable<string>;
  system_channel_flags: Nullable<number /* int */>;
  rules_channel_id: Nullable<string>;
  public_updates_channel_id: Nullable<string>;
  preferred_locale: Nullable<string>;
  features: Nullable<string[]>;
  description: Nullable<string>;
  premium_progress_bar_enabled: Nullable<boolean>;
  safety_alerts_channel_id: Nullable<string>;
}
export type GuildUpdateResponse = Guild;

//////////
// source: interaction.go

export interface Interaction {
  id: string;
  application_id: string;
  type: InteractionType;
  data?: any;
  guild_id?: string;
  channel?: Channel;
  channel_id?: string;
  member?: Member;
  user?: User;
  token: string;
  version: number /* int */;
  message?: Message;
  application_permissions?: string;
  locale?: string;
  guild_locale?: string;
}
export type InteractionType = number /* int */;
export const InteractionTypePing: InteractionType = 1;
export const InteractionTypeApplicationCommand: InteractionType = 2;
export const InteractionTypeMessageComponent: InteractionType = 3;
export const InteractionTypeApplicationCommandAutocomplete: InteractionType = 4;
export const InteractionTypeModalSubmit: InteractionType = 5;
export interface ApplicationCommandInteractionData {
  id: string;
  name: string;
  type: ApplicationCommandType;
  resolved?: ResolvedData;
  options?: ApplicationCommandOptionData[];
  guild_id?: string;
  target_id?: string;
}
export type ApplicationCommandType = number /* int */;
export const ApplicationCommandTypeChatInput: ApplicationCommandType = 1;
export const ApplicationCommandTypeUser: ApplicationCommandType = 2;
export const ApplicationCommandTypeMessage: ApplicationCommandType = 3;
export interface ApplicationCommandOptionData {
  name: string;
  type: ApplicationCommandOptionType;
  value?: any;
  options?: ApplicationCommandOptionData[];
  focused?: boolean;
}
export type ApplicationCommandOptionType = number /* int */;
export const ApplicationCommandOptionTypeSubCommand: ApplicationCommandOptionType = 1;
export const ApplicationCommandOptionTypeSubCommandGroup: ApplicationCommandOptionType = 2;
export const ApplicationCommandOptionTypeString: ApplicationCommandOptionType = 3;
export const ApplicationCommandOptionTypeInteger: ApplicationCommandOptionType = 4;
export const ApplicationCommandOptionTypeBoolean: ApplicationCommandOptionType = 5;
export const ApplicationCommandOptionTypeUser: ApplicationCommandOptionType = 6;
export const ApplicationCommandOptionTypeChannel: ApplicationCommandOptionType = 7;
export const ApplicationCommandOptionTypeRole: ApplicationCommandOptionType = 8;
export const ApplicationCommandOptionTypeMentionable: ApplicationCommandOptionType = 9;
export const ApplicationCommandOptionTypeNumber: ApplicationCommandOptionType = 10;
export const ApplicationCommandOptionTypeAttachment: ApplicationCommandOptionType = 11;
export interface MessageComponentInteractionData {
  custom_id: string;
  component_type: MessageComponentType;
  values?: string[];
  resolved?: ResolvedData;
}
export type MessageComponentType = number /* int */;
export const MessageComponentTypeActionRow: MessageComponentType = 1;
export const MessageComponentTypeButton: MessageComponentType = 2;
export const MessageComponentTypeStringSelect: MessageComponentType = 3;
export const MessageComponentTypeTextInput: MessageComponentType = 4;
export const MessageComponentTypeUserSelect: MessageComponentType = 5;
export const MessageComponentTypeRoleSelect: MessageComponentType = 6;
export const MessageComponentTypeMentionableSelect: MessageComponentType = 7;
export const MessageComponentTypeChannelSelect: MessageComponentType = 8;
export interface ResolvedData {
  users?: { [key: string]: User};
  members?: { [key: string]: Member};
  roles?: { [key: string]: Role};
  channels?: { [key: string]: Channel};
  messages?: { [key: string]: Message};
  attachments?: { [key: string]: MessageAttachment};
}
export interface InteractionResponseData {
  tts?: boolean;
  content?: string;
  embeds?: MessageEmbed[];
  /**
   * AllowedMentions *AllowedMentions `json:"allowed_mentions,omitempty"`
   */
  flags?: number /* int */;
  components?: MessageComponent[];
}
export type InteractionCreateEvent = Interaction;
export interface InteractionResponseCreateCall {
  id: string;
  token: string;
  data: InteractionResponseData;
}
export type InteractionResponseCreateResponse = Message;
export interface InteractionResponseUpdateCall {
  id: string;
  token: string;
  data: string;
}
export type InteractionResponseUpdateResponse = Message;
export interface InteractionResponseDeleteCall {
  id: string;
  token: string;
}
export interface InteractionResponseDeleteResponse {
}
export interface InteractionResponseGetCall {
  id: string;
  token: string;
}
export type InteractionResponseGetResponse = Message;
export interface InteractionFollowupCreateCall {
  id: string;
  token: string;
  data: InteractionResponseData;
}
export type InteractionFollowupCreateResponse = Message;
export interface InteractionFollowupUpdateCall {
  id: string;
  token: string;
  message_id: string;
  data: InteractionResponseData;
}
export type InteractionFollowupUpdateResponse = Message;
export interface InteractionFollowupDeleteCall {
  id: string;
  token: string;
  message_id: string;
}
export interface InteractionFollowupDeleteResponse {
}
export interface InteractionFollowupGetCall {
  id: string;
  token: string;
  message_id: string;
}
export type InteractionFollowupGetResponse = Message;

//////////
// source: invite.go

export interface Invite {
  code: string;
  guild?: Guild;
  channel?: Channel;
  inviter?: User;
  target_type: InviteTargetType;
  target_user?: User;
  target_application?: Application;
  approximate_presence_count: number /* int */;
  approximate_member_count: number /* int */;
  expires_at: string /* RFC3339 */;
}
export type InviteTargetType = number /* int */;
export const InviteTargetTypeStream: InviteTargetType = 1;
export const InviteTargetTypeEmbeddedApplication: InviteTargetType = 2;
export interface InviteCreateEvent {
  channel_id: string;
  code: string;
  created_at: string /* RFC3339 */;
  guild_id: string;
  inviter?: User;
  max_age: number /* int */;
  max_uses: number /* int */;
  target_type: InviteTargetType;
  target_user?: User;
  target_application?: Application;
  temporary: boolean;
  uses: number /* int */;
}
export interface InviteDeleteEvent {
  channel_id: string;
  guild_id: string;
  code: string;
}
export interface InviteListForChannelCall {
  channel_id: string;
}
export type InviteListForChannelResponse = Invite[];
export interface InviteListForGuildCall {
}
export type InviteListForGuildResponse = Invite[];
export interface InviteCreateCall {
  channel_id: string;
  max_age?: number /* int */;
  max_uses?: number /* int */;
  temporary?: boolean;
  unique?: boolean;
  target_type?: InviteTargetType;
  target_user_id?: string;
  target_application_id?: string;
}
export type InviteCreateResponse = Invite;
export interface InviteGetCall {
  code: string;
  with_counts?: boolean;
  with_expiration?: boolean;
  guild_scheduled_event_id?: string;
}
export type InviteGetResponse = Invite;
export interface InviteDeleteCall {
  code: string;
}
export type InviteDeleteResponse = Invite;

//////////
// source: member.go

export interface Member {
  user?: User;
  nick?: string;
  avatar?: string;
  roles: string[];
  joined_at: string /* RFC3339 */;
  premium_since?: string /* RFC3339 */;
  deaf: boolean;
  mute: boolean;
  flags: number /* int */;
  pending?: boolean;
  permissions?: string;
  communication_disabled_until?: string /* RFC3339 */;
}
export interface GuildMemberAddEvent {
  Member: Member;
  guild_id: string;
}
export interface GuildMemberRemoveEvent {
  user: User;
  guild_id: string;
}
export interface GuildMemberUpdateEvent {
  Member: Member;
  guild_id: string;
}
export interface MemberGetCall {
  user_id: string;
}
export type MemberGetResponse = Member;
export interface MemberListCall {
  limit?: number /* int */;
  after?: number /* int */;
}
export type MemberListResponse = Member[];
export interface MemberSearchCall {
  query: string;
  limit?: number /* int */;
}
export type MemberSearchResponse = Member[];
export interface MemberUpdateCall {
  user_id: string;
  nick?: Nullable<string>;
  roles?: Nullable<string[]>;
  mute?: Nullable<boolean>;
  deaf?: Nullable<boolean>;
  channel_id?: Nullable<string>;
  communication_disabled_until?: Nullable<string /* RFC3339 */>;
  flags?: Nullable<number /* int */>;
}
export type MemberUpdateResponse = Member;
export interface MemberUpdateOwnCall {
  nick?: string;
}
export type MemberUpdateOwnResponse = Member;
export interface MemberRoleAddCall {
  user_id: string;
  role_id: string;
}
export interface MemberAddRoleResponse {
}
export interface MemberRoleRemoveCall {
  user_id: string;
  role_id: string;
}
export interface MemberRemoveRoleResponse {
}
export interface MemberRemoveCall {
  user_id: string;
}
export interface MemberRemoveResponse {
}
export interface MemberPruneCountCall {
  days: number /* int */;
  include_roles: string[];
}
export interface MemberPruneCountResponse {
  pruned: number /* int */;
}
export interface MemberPruneBeginCall {
  days: number /* int */;
  compute_prune_count: boolean;
  include_roles: string[];
  reason?: string;
}
export interface MemberPruneBeginResponse {
  pruned: number /* int */;
}

//////////
// source: message.go

export interface Message {
  id: string;
  channel_id: string;
  author: User;
  content: string;
  timestamp: string /* RFC3339 */;
  edited_timestamp: string /* RFC3339 */;
  tts: boolean;
  mention_everyone: boolean;
  mentions?: User[];
  mention_roles?: Role[];
  mention_channels?: Channel[];
  attachments?: MessageAttachment[];
  embeds?: MessageEmbed[];
  reactions?: MessageReaction[];
  nonce?: any;
  pinned: boolean;
  webhook_id?: string;
  type?: MessageType;
  /**
   * Activity     interface{} `json:"activity,omitempty"`
   */
  application?: Application;
  application_id?: string;
  message_reference?: MessageReference;
  flags?: number /* int */;
  referenced_message?: Message;
  interaction?: MessageInteraction;
  thread?: Channel;
  components?: MessageComponent[];
  /**
   * StickerItems 	[]StickerItem       `json:"sticker_items,omitempty"`
   * Stickers     	[]Sticker           `json:"stickers,omitempty"`
   */
  position?: number /* int */;
  /**
   * RoleSubscriptionData
   */
  resolved?: ResolvedData;
}
export interface MessageAttachment {
  id: string;
  filename: string;
  description?: string;
  content_type?: string;
  size: number /* int */;
  url: string;
  proxy_url: string;
  height?: number /* int */;
  width?: number /* int */;
  ephemeral?: boolean;
  duration_secs?: number /* float32 */;
  waveform?: string;
  flags?: number /* int */;
}
export interface MessageEmbed {
}
export interface MessageReaction {
  count: number /* int */;
  count_details?: MessageReactionCountDetails;
  me: boolean;
  me_burst: boolean;
  Emoji: Emoji;
}
export interface MessageReactionCountDetails {
  burst: number /* int */;
  normal: number /* int */;
}
export type MessageType = number /* int */;
export const MessageTypeDefault: MessageType = 0;
export const MessageTypeRecipientAdd: MessageType = 1;
export const MessageTypeRecipientRemove: MessageType = 2;
export const MessageTypeCall: MessageType = 3;
export const MessageTypeChannelNameChange: MessageType = 4;
export const MessageTypeChannelIconChange: MessageType = 5;
export const MessageTypeChannelPinnedMessage: MessageType = 6;
export const MessageTypeGuildUserJoin: MessageType = 7;
export const MessageTypeGuildBoost: MessageType = 8;
export const MessageTypeGuildBoostTier1: MessageType = 9;
export const MessageTypeGuildBoostTier2: MessageType = 10;
export const MessageTypeGuildBoostTier3: MessageType = 11;
export const MessageTypeChannelFollowAdd: MessageType = 12;
export const MessageTypeGuildDiscoveryDisqualified: MessageType = 14;
export const MessageTypeGuildDiscoveryRequalified: MessageType = 15;
export const MessageTypeGuildDiscoveryGracePeriodInitialWarning: MessageType = 16;
export const MessageTypeGuildDiscoveryGracePeriodFinalWarning: MessageType = 17;
export const MessageTypeThreadCreated: MessageType = 18;
export const MessageTypeReply: MessageType = 19;
export const MessageTypeChatInputCommand: MessageType = 20;
export const MessageTypeThreadStarterMessage: MessageType = 21;
export const MessageTypeGuildInviteReminder: MessageType = 22;
export const MessageTypeContextMenuCommand: MessageType = 23;
export const MessageTypeAutoModerationAction: MessageType = 24;
export const MessageTypeRoleSubscriptionPurchase: MessageType = 25;
export const MessageTypeInteractionPremiumUpsell: MessageType = 26;
export const MessageTypeStageStart: MessageType = 27;
export const MessageTypeStageEnd: MessageType = 28;
export const MessageTypeStageSpeaker: MessageType = 29;
export const MessageTypeStageTopic: MessageType = 31;
export const MessageTypeGuildApplicationPremiumSubscription: MessageType = 32;
export interface MessageReference {
  message_id?: string;
  channel_id?: string;
  guild_id?: string;
  fail_if_not_exists?: boolean;
}
export interface MessageInteraction {
  id: string;
  type: InteractionType;
  name: string;
  user: User;
  member?: Member;
}
export interface MessageComponent {
}
export type MessageCreateEvent = Message;
export type MessageUpdateEvent = MessageDeleteResponse;
export interface MessageDeleteEvent {
  id: string;
  channel_id: string;
  guild_id?: string;
}
export interface MessageDeleteBulkEvent {
  ids: string[];
  channel_id: string;
  guild_id?: string;
}
export interface MessageReactionAddEvent {
  user_id: string;
  channel_id: string;
  message_id: string;
  guild_id?: string;
  member?: Member;
  emoji: Emoji;
  message_author_id: string;
}
export interface MessageReactionRemoveEvent {
  user_id: string;
  channel_id: string;
  message_id: string;
  guild_id?: string;
  emoji: Emoji;
}
export interface MessageReactionRemoveAllEvent {
  channel_id: string;
  message_id: string;
  guild_id?: string;
}
export interface MessageReactionRemoveEmojiEvent {
  channel_id: string;
  message_id: string;
  guild_id?: string;
  emoji: Emoji;
}
export interface MessageListCall {
  channel_id: string;
  limit?: number /* int */;
  before?: string;
  after?: string;
  around?: string;
}
export type MessageListResponse = Message[];
export interface MessageGetCall {
  channel_id: string;
  message_id: string;
}
export type MessageGetResponse = Message;
export interface MessageCreateCall {
  channel_id: string;
  content: string;
  tts: boolean;
  /**
   * Attachments      []MessageAttachment `json:"attachments,omitempty"`
   */
  embeds?: MessageEmbed[];
  message_reference?: MessageReference;
  components?: MessageComponent[];
}
export type MessageCreateResponse = Message;
export interface MessageUpdateCall {
  channel_id: string;
  message_id: string;
  content: string;
  /**
   * Attachments      []MessageAttachment `json:"attachments,omitempty"`
   */
  embeds?: MessageEmbed[];
  message_reference?: MessageReference;
  components?: MessageComponent[];
}
export type MessageUpdateResponse = Message;
export interface MessageDeleteCall {
  channel_id: string;
  message_id: string;
}
export interface MessageDeleteResponse {
}
export interface MessageDeleteBulkCall {
  channel_id: string;
  messages: string[];
}
export interface MessageDeleteBulkResponse {
}
export interface MessageReactionCreateCall {
  channel_id: string;
  message_id: string;
  /**
   * unicode emoji or name:id for custom emojis
   */
  emoji: string;
}
export interface MessageReactionCreateResponse {
}
export interface MessageReactionDeleteOwnCall {
  channel_id: string;
  message_id: string;
  /**
   * unicode emoji or name:id for custom emojis
   */
  emoji: string;
}
export interface MessageReactionDeleteOwnResponse {
}
export interface MessageReactionDeleteUserCall {
  channel_id: string;
  message_id: string;
  /**
   * unicode emoji or name:id for custom emojis
   */
  emoji: string;
  user_id: string;
}
export interface MessageReactionDeleteUserResponse {
}
export interface MessageReactionListCall {
  channel_id: string;
  message_id: string;
  /**
   * unicode emoji or name:id for custom emojis
   */
  emoji: string;
  after?: string;
  limit?: number /* int */;
}
export type MessageReactionListResponse = User[];
export interface MessageReactionDeleteAllCall {
  channel_id: string;
  message_id: string;
}
export interface MessageReactionDeleteAllResponse {
}
export interface MessageReactionDeleteEmojiCall {
  channel_id: string;
  message_id: string;
  /**
   * unicode emoji or name:id for custom emojis
   */
  emoji: string;
}
export interface MessageReactionDeleteEmojiResponse {
}
export interface MessageGetPinnedCall {
  channel_id: string;
}
export type MessageGetPinnedResponse = Message[];
export interface MessagePinCall {
  channel_id: string;
  message_id: string;
}
export interface MessagePinResponse {
}
export interface MessageUnpinCall {
  channel_id: string;
  message_id: string;
}
export interface MessageUnpinResponse {
}

//////////
// source: role.go

export interface Role {
  id: string;
  name: string;
  color: number /* int */;
  hoist: boolean;
  icon?: string;
  unicode_emoji?: string;
  position: number /* int */;
  permissions: string;
  managed: boolean;
  mentionable: boolean;
  tags?: RoleTag[];
  flags: number /* int */;
}
export interface RoleTag {
  bot_id?: string;
  integration_id?: string;
  premium_subscriber?: boolean;
  subscription_listing_id?: string;
  available_for_purchase?: boolean;
  guild_connections?: boolean;
}
export interface GuildRoleCreateEvent {
  role: Role;
  guild_id: string;
}
export interface GuildRoleUpdateEvent {
  role: Role;
  guild_id: string;
}
export interface GuildRoleDeleteEvent {
  role_id: string;
  guild_id: string;
}
export interface RoleListCall {
}
export type RoleListResponse = Role[];
export interface RoleCreateCall {
  name: string;
  permissions: string;
  color?: number /* int */;
  hoist?: boolean;
  icon?: string;
  unicode_emoji?: string;
  mentionable?: boolean;
}
export type RoleCreateResponse = Role;
export interface RoleUpdateCall {
  role_id: string;
  name: string;
  permissions: string;
  color?: number /* int */;
  hoist?: boolean;
  icon?: string;
  unicode_emoji?: string;
  mentionable?: boolean;
}
export type RoleUpdateResponse = Role;
export type RoleUpdatePositionsCall = RoleUpdatePositionsEntry[];
export interface RoleUpdatePositionsEntry {
  role_id: string;
  position: number /* int */;
}
export type RoleUpdatePositionsResponse = Role[];
export interface RoleDeleteCall {
  role_id: string;
}
export interface RoleDeleteResponse {
}

//////////
// source: scheduled_event.go

export interface ScheduledEvent {
  id: string;
  guild_id: string;
  channel_id: string;
  creator_id: string;
  name: string;
  description: string;
  scheduled_start_time: string /* RFC3339 */;
  scheduled_end_time: string /* RFC3339 */;
  privacy_level: ScheduledEventPrivacyLevel;
  status: ScheduledEventStatus;
  entity_type: ScheduledEventEntityType;
  entity_id: string;
  entity_metadata?: ScheduledEventEntityMetadata;
  creator?: User;
  user_count: number /* int */;
  image: string;
}
export type ScheduledEventPrivacyLevel = number /* int */;
export const ScheduledEventPrivacyLevelGuildOnly: ScheduledEventPrivacyLevel = 2;
export type ScheduledEventStatus = number /* int */;
export const ScheduledEventStatusScheduled: ScheduledEventStatus = 1;
export const ScheduledEventStatusActive: ScheduledEventStatus = 2;
export const ScheduledEventStatusCompleted: ScheduledEventStatus = 3;
export const ScheduledEventStatusCanceled: ScheduledEventStatus = 4;
export type ScheduledEventEntityType = number /* int */;
export const ScheduledEventEntityTypeStageInstance: ScheduledEventEntityType = 1;
export const ScheduledEventEntityTypeVoice: ScheduledEventEntityType = 2;
export const ScheduledEventEntityTypeExternal: ScheduledEventEntityType = 3;
export interface ScheduledEventEntityMetadata {
  location: string;
}
export interface ScheduledEventUser {
  guild_scheduled_event_id: string;
  user?: User;
  member?: Member;
}
export type GuildScheduledEventCreateEvent = ScheduledEvent;
export type GuildScheduledEventUpdateEvent = ScheduledEvent;
export type GuildScheduledEventDeleteEvent = ScheduledEvent;
export type GuildScheduledEventStatusUpdateEvent = ScheduledEvent;
export interface GuildScheduledEventUserAddEvent {
  guild_scheduled_event_id: string;
  user_id: string;
  guild_id: string;
}
export interface GuildScheduledEventUserRemoveEvent {
  guild_scheduled_event_id: string;
  user_id: string;
  guild_id: string;
}
export interface ScheduledEventListCall {
  with_user_count?: boolean;
}
export type ScheduledEventListResponse = ScheduledEvent[];
export interface ScheduledEventCreateCall {
  channel_id?: string;
  entity_metadata?: ScheduledEventEntityMetadata;
  name: string;
  privacy_level: ScheduledEventPrivacyLevel;
  scheduled_start_time: string /* RFC3339 */;
  scheduled_end_time?: string /* RFC3339 */;
  description?: string;
  entity_type?: ScheduledEventEntityType;
  image?: string;
}
export type ScheduledEventCreateResponse = ScheduledEvent;
export interface ScheduledEventGetCall {
  id: string;
}
export type ScheduledEventGetResponse = ScheduledEvent;
export interface ScheduledEventUpdateCall {
  id: string;
  channel_id?: Nullable<string>;
  name?: Nullable<string>;
  privacy_level?: Nullable<ScheduledEventPrivacyLevel>;
  scheduled_start_time?: Nullable<string /* RFC3339 */>;
  scheduled_end_time?: Nullable<string /* RFC3339 */>;
  description?: Nullable<string>;
  entity_type?: Nullable<ScheduledEventEntityType>;
  status?: Nullable<ScheduledEventStatus>;
  image?: Nullable<string>;
}
export type ScheduledEventUpdateResponse = ScheduledEvent;
export interface ScheduledEventDeleteCall {
  id: string;
}
export interface ScheduledEventDeleteResponse {
}
export interface ScheduledEventUserListCall {
  id: string;
  limit?: number /* int */;
  with_member?: boolean;
  before?: string;
  after?: string;
}
export type ScheduledEventUserListResponse = ScheduledEventUser[];

//////////
// source: stage.go

export interface StageInstance {
  id: string;
  guild_id: string;
  channel_id: string;
  topic: string;
  privacy_level: StagePrivacyLevel;
  discoverable_disabled: boolean;
  guild_scheduled_event_id: string;
}
export type StagePrivacyLevel = number /* int */;
export const StagePrivacyLevelPublic: StagePrivacyLevel = 1;
export const StagePrivacyLevelGuildOnly: StagePrivacyLevel = 2;
export type StageInstanceCreateEvent = StageInstance;
export type StageInstanceUpdateEvent = StageInstance;
export type StageInstanceDeleteEvent = StageInstance;
export interface StageInstanceCreateCall {
  channel_id: string;
  topic: string;
  privacy_level: StagePrivacyLevel;
  send_start_notification: boolean;
  guild_scheduled_event_id: string;
}
export type StageInstanceCreateResponse = StageInstance;
export interface StageInstanceGetCall {
  channel_id: string;
}
export type StageInstanceGetResponse = StageInstance;
export interface StageInstanceUpdateCall {
  channel_id: string;
  topic?: Nullable<string>;
  privacy_level?: Nullable<StagePrivacyLevel>;
}
export type StageInstanceUpdateResponse = StageInstance;
export interface StageInstanceDeleteCall {
  channel_id: string;
}
export interface StageInstanceDeleteResponse {
}

//////////
// source: sticker.go

export interface Sticker {
}
export interface GuildStickersUpdateEvent {
  guild_id: string;
  stickers: Sticker[];
}
export interface StickerListCall {
}
export type StickerListResponse = Sticker[];
export interface StickerGetCall {
  id: string;
}
export type StickerGetResponse = Sticker;
export interface StickerCreateCall {
  name: string;
  description: string;
  tags: string;
  file: string;
}
export type StickerCreateResponse = Sticker;
export interface StickerUpdateCall {
  id: string;
  name: string;
  description: string;
  tags: string;
}
export type StickerUpdateResponse = Sticker;
export interface StickerDeleteCall {
  id: string;
}
export interface StickerDeleteResponse {
}

//////////
// source: user.go

export interface User {
  id: string;
  username: string;
  discriminator: string;
  global_name?: string;
  avatar?: string;
  bot?: boolean;
  system?: boolean;
  banner?: string;
  accent_color?: number /* int */;
  public_flags?: number /* int */;
  avatar_decoration?: string;
}
export interface UserGetCall {
  user_id: string;
}
export type UserGetResponse = User;

//////////
// source: webhook.go

export interface Webhook {
  id: string;
  type: WebhookType;
  guild_id: string;
  channel_id: string;
  user: User;
  name: string;
  avatar: string;
  token: string;
  application_id: string;
  source_guild?: Guild;
  source_channel?: Channel;
  url: string;
}
export type WebhookType = number /* int */;
export const WebhookTypeIncoming: WebhookType = 1;
export const WebhookTypeChannelFollower: WebhookType = 2;
export const WebhookTypeApplication: WebhookType = 3;
export interface WebhooksUpdateEvent {
  guild_id: string;
  channel_id: string;
}
export interface WebhookCreateCall {
  name: string;
  avatar?: string;
}
export type WebhookCreateResponse = Webhook;
export interface WebhookListForChannelCall {
  channel_id: string;
}
export type WebhookListForChannelResponse = Webhook[];
export interface WebhookListForGuildCall {
}
export type WebhookListForGuildResponse = Webhook[];
export interface WebhookGetCall {
  id: string;
}
export type WebhookGetResponse = Webhook;
export interface WebhookGetWithTokenCall {
  id: string;
  token: string;
}
export type WebhookGetWithTokenResponse = Webhook;
export interface WebhookUpdateCall {
  id: string;
  name?: Nullable<string>;
  avatar?: Nullable<string>;
  channel_id?: Nullable<string>;
}
export type WebhookUpdateResponse = Webhook;
export interface WebhookUpdateWithTokenCall {
  id: string;
  token: string;
  name?: Nullable<string>;
  avatar?: Nullable<string>;
  channel_id?: Nullable<string>;
}
export type WebhookUpdateWithTokenResponse = Webhook;
export interface WebhookDeleteCall {
  id: string;
}
export interface WebhookDeleteResponse {
}
export interface WebhookDeleteWithTokenCall {
  id: string;
  token: string;
}
export interface WebhookDeleteWithTokenResponse {
}
export interface WebhookExecuteCall {
  id: string;
  token: string;
  wait?: boolean;
  thread_id?: string;
}
export type WebhookExecuteResponse = Nullable<Message>;
export interface WebhookGetMessageCall {
  id: string;
  token: string;
  message_id: string;
}
export type WebhookGetMessageResponse = Message;
export interface WebhookEditMessageCall {
  id: string;
  token: string;
  message_id: string;
}
export type WebhookEditMessageResponse = Message;
export interface WebhookDeleteMessageCall {
  id: string;
  token: string;
  message_id: string;
}
export interface WebhookDeleteMessageResponse {
}
