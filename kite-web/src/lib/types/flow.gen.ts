// Code generated by tygo. DO NOT EDIT.
type StringIndexable = Record<string, unknown>;

//////////
// source: data.go

export interface FlowData {
  nodes: FlowNode[];
  edges: FlowEdge[];
}
export type FlowNodeType = string;
export const FlowNodeTypeEntryCommand: FlowNodeType = "entry_command";
export const FlowNodeTypeEntryEvent: FlowNodeType = "entry_event";
export const FlowNodeTypeActionResponseCreate: FlowNodeType = "action_response_create";
export const FlowNodeTypeActionMessageCreate: FlowNodeType = "action_message_create";
export const FlowNodeTypeActionLog: FlowNodeType = "action_log";
export const FlowNodeTypeConditionCompare: FlowNodeType = "condition_compare";
export const FlowNodeTypeConditionItemCompare: FlowNodeType = "condition_item_compare";
export const FlowNodeTypeConditionItemElse: FlowNodeType = "condition_item_else";
/**
 * TODO: FlowNodeTypeOptionCommandArgument?
 * TODO: FlowNodeTypeOptionCommandPermissions?
 */
export const FlowNodeTypeOptionCommandText: FlowNodeType = "option_command_text";
export const FlowNodeTypeOptionCommandNumber: FlowNodeType = "option_command_number";
export const FlowNodeTypeOptionCommandUser: FlowNodeType = "option_command_user";
export const FlowNodeTypeOptionCommandChannel: FlowNodeType = "option_command_channel";
export const FlowNodeTypeOptionCommandRole: FlowNodeType = "option_command_role";
export const FlowNodeTypeOptionCommandAttachment: FlowNodeType = "option_command_attachment";
export interface FlowNode {
  id: string;
  type?: FlowNodeType;
  data: FlowNodeData & StringIndexable;
  position: FlowNodePosition;
}
export interface FlowNodeData {
  custom_label?: string;
  name?: string;
  description?: string;
  event_type?: string;
  message_data?: any /* api.SendMessageData */;
  message_ephemeral?: boolean;
  log_level?: LogLevel;
  log_message?: string;
  condition_base_value?: FlowValue;
  condition_allow_multiple?: boolean;
  condition_item_mode?: ConditionItemType;
  condition_item_value?: FlowValue;
  result_variable_name?: string;
}
export type LogLevel = string;
export const LogLevelDebug: LogLevel = "debug";
export const LogLevelInfo: LogLevel = "info";
export const LogLevelWarn: LogLevel = "warn";
export const LogLevelError: LogLevel = "error";
export type ConditionItemType = string;
export const ConditionItemModeEqual: ConditionItemType = "equal";
export const ConditionItemModeNotEqual: ConditionItemType = "not_equal";
export const ConditionItemModeGreaterThan: ConditionItemType = "greater_than";
export const ConditionItemModeGreaterThanOrEqual: ConditionItemType = "greater_than_or_equal";
export const ConditionItemModeLessThan: ConditionItemType = "less_than";
export const ConditionItemModeLessThanOrEqual: ConditionItemType = "less_than_or_equal";
export const ConditionItemModeContains: ConditionItemType = "contains";
export interface FlowNodePosition {
  x: number /* float64 */;
  y: number /* float64 */;
}
export interface FlowEdge {
  id: string;
  type?: string;
  source: string;
  target: string;
}

//////////
// source: value.go

export type FlowValueType = string;
export const FlowValueTypeNull: FlowValueType = "null";
export const FlowValueTypeString: FlowValueType = "string";
export const FlowValueTypeNumber: FlowValueType = "number";
export const FlowValueTypeMessage: FlowValueType = "message";
export interface FlowValue {
  type: FlowValueType;
  value: any;
}
